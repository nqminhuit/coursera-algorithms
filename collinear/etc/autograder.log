See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     FAILED (2 warnings)
PMD:          PASSED
Checkstyle:   PASSED

Correctness:  29/41 tests passed
Memory:       1/1 tests passed
Timing:       10/41 tests passed

Aggregate score: 67.32%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
3.2K Apr  5 02:02 BruteCollinearPoints.java
3.4K Apr  5 02:02 FastCollinearPoints.java
3.9K Apr  5 02:02 Point.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac11 Point.java
*-----------------------------------------------------------

% javac11 LineSegment.java
*-----------------------------------------------------------

% javac11 BruteCollinearPoints.java
*-----------------------------------------------------------

% javac11 FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At BruteCollinearPoints.java:[line 53]
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At FastCollinearPoints.java:[line 57]
Warnings generated: 2


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for Point.java
*-----------------------------------------------------------

% custom checkstyle checks for BruteCollinearPoints.java
*-----------------------------------------------------------

% custom checkstyle checks for FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  * positive infinite slope, where p and q have coordinates in [0, 500)
  * positive infinite slope, where p and q have coordinates in [0, 32768)
  * negative infinite slope, where p and q have coordinates in [0, 500)
  * negative infinite slope, where p and q have coordinates in [0, 32768)
  * positive zero     slope, where p and q have coordinates in [0, 500)
  * positive zero     slope, where p and q have coordinates in [0, 32768)
  * symmetric for random points p and q with coordinates in [0, 500)
  * symmetric for random points p and q with coordinates in [0, 32768)
  * transitive for random points p, q, and r with coordinates in [0, 500)
  * transitive for random points p, q, and r with coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 500)
  * slopeTo(), where p and q have coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 10)
  * throw a java.lang.NullPointerException if argument is null
==> passed

Test 2: p.compareTo(q)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p and q have coordinates in [0, 500)
  * antisymmetric, where p and q have coordinates in [0, 32768)
  * transitive, where p, q, and r have coordinates in [0, 500)
  * transitive, where p, q, and r have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 500)
  * sign of compareTo(), where p and q have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 10)
  * throw java.lang.NullPointerException exception if argument is null
==> passed

Test 3: p.slopeOrder().compare(q, r)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p, q, and r have coordinates in [0, 500)
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)
  * transitive, where p, q, r, and s have coordinates in [0, 500)
  * transitive, where p, q, r, and s have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 500)
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 10)
  * throw java.lang.NullPointerException if either argument is null
==> passed


Total: 3/3 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
==> passed

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==> passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
==> passed

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==> passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 6: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 7: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 8: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 9: random line segments
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 10: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
    - failed after 7 operations involving BruteCollinearPoints
    - first call to student numberOfSegments() = 0
    - last  call to student numberOfSegments() = 2

    - sequence of operations was:
          BruteCollinearPoints collinear = new BruteCollinearPoints(points);
          mutate points[] array that was passed to constructor
          mutate points[] array that was passed to constructor
          collinear.numberOfSegments() -> 0
          collinear.numberOfSegments() -> 0
          collinear.segments()
          collinear.numberOfSegments() -> 2

    - failed on trial 1 of 100

  * equidistant.txt
    - failed after 5 operations involving BruteCollinearPoints
    - first call to student numberOfSegments() = 0
    - last  call to student numberOfSegments() = 4

    - sequence of operations was:
          BruteCollinearPoints collinear = new BruteCollinearPoints(points);
          collinear.numberOfSegments() -> 0
          mutate points[] array that was passed to constructor
          collinear.segments()
          collinear.numberOfSegments() -> 4

    - failed on trial 1 of 100

==> FAILED

Test 11: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 13: throws an exception if either the constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 14: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 16/17 tests passed!


================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = input299.txt


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Point exceeds limit: 200000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
  * filename = horizontal50.txt
  * filename = horizontal75.txt


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Point exceeds limit: 200000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  * filename = horizontal100.txt


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Point exceeds limit: 200000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==> passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
  * filename = vertical50.txt
  * filename = vertical75.txt


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Point exceeds limit: 200000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  * filename = vertical100.txt


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Point exceeds limit: 200000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==> passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
  * filename = random91.txt
  * filename = random152.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5a: points from a file with 5 or more on some line segments
  * filename = input9.txt
  * filename = input10.txt
  * filename = input20.txt
  * filename = input50.txt
  * filename = input80.txt
  * filename = input300.txt


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Point exceeds limit: 200000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  * filename = inarow.txt


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Point exceeds limit: 200000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 5b: points from a file with 5 or more on some line segments
  * filename = kw1260.txt


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Point exceeds limit: 200000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  * filename = rs1423.txt


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Point exceeds limit: 200000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 6: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 7: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = input299.txt


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Point exceeds limit: 200000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 8: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 9: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 25 random line segments


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Point exceeds limit: 200000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    - failed on trial 30 of 100

  * 50 random line segments


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Point exceeds limit: 200000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    - failed on trial 1 of 15

  * 100 random line segments


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Point exceeds limit: 200000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    - failed on trial 1 of 2

==> FAILED

Test 10: random line segments
  *  1 random line segment
  *  5 random line segments
  * 25 random line segments


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Point exceeds limit: 200000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    - failed on trial 30 of 100

  * 50 random line segments


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Point exceeds limit: 200000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    - failed on trial 1 of 15

  * 100 random line segments


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Point exceeds limit: 200000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    - failed on trial 1 of 2

==> FAILED

Test 11: random distinct points in a given range
  * 5 random points in a 10-by-10 grid
  * 10 random points in a 10-by-10 grid
  * 50 random points in a 10-by-10 grid

    java.lang.ArrayIndexOutOfBoundsException: Index 49 out of bounds for length 49

    FastCollinearPoints.segments(FastCollinearPoints.java:90)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.randomPointsInRange(TestFastCollinearPoints.java:426)
    TestFastCollinearPoints.test11(TestFastCollinearPoints.java:446)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:819)

    - failed on trial 38 of 100

  * 90 random points in a 10-by-10 grid

    java.lang.ArrayIndexOutOfBoundsException: Index 89 out of bounds for length 89

    FastCollinearPoints.segments(FastCollinearPoints.java:90)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.randomPointsInRange(TestFastCollinearPoints.java:426)
    TestFastCollinearPoints.test11(TestFastCollinearPoints.java:447)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:819)

    - failed on trial 1 of 50

  * 200 random points in a 50-by-50 grid

    java.lang.ArrayIndexOutOfBoundsException: Index 199 out of bounds for length 199

    FastCollinearPoints.segments(FastCollinearPoints.java:90)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.randomPointsInRange(TestFastCollinearPoints.java:426)
    TestFastCollinearPoints.test11(TestFastCollinearPoints.java:448)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:819)

    - failed on trial 1 of 10

==> FAILED

Test 12: m*n points on an m-by-n grid
  * 3-by-3 grid
  * 4-by-4 grid
  * 5-by-5 grid
  * 10-by-10 grid

    java.lang.ArrayIndexOutOfBoundsException: Index 99 out of bounds for length 99

    FastCollinearPoints.segments(FastCollinearPoints.java:90)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:455)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:463)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:822)

  * 20-by-20 grid

    java.lang.ArrayIndexOutOfBoundsException: Index 399 out of bounds for length 399

    FastCollinearPoints.segments(FastCollinearPoints.java:90)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:455)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:464)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:822)

  * 5-by-4 grid
  * 6-by-4 grid
  * 10-by-4 grid
  * 15-by-4 grid

    java.lang.ArrayIndexOutOfBoundsException: Index 59 out of bounds for length 59

    FastCollinearPoints.segments(FastCollinearPoints.java:90)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:455)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:468)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:822)

  * 25-by-4 grid

    java.lang.ArrayIndexOutOfBoundsException: Index 99 out of bounds for length 99

    FastCollinearPoints.segments(FastCollinearPoints.java:90)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:455)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:469)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:822)

==> FAILED

Test 13: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
    - failed after 5 operations involving FastCollinearPoints
    - first and last call to segments() returned different arrays
    - sequence of operations was:
          FastCollinearPoints collinear = new FastCollinearPoints(points);
          collinear.segments()
          mutate array returned by last call to segments()
          mutate points[] array that was passed to constructor
          collinear.segments()
    - failed on trial 1 of 100

  * equidistant.txt
    - failed after 7 operations involving FastCollinearPoints
    - first call to student numberOfSegments() = 0
    - last  call to student numberOfSegments() = 4
    - sequence of operations was:
          FastCollinearPoints collinear = new FastCollinearPoints(points);
          mutate points[] array that was passed to constructor
          collinear.numberOfSegments() -> 0
          collinear.segments()
          mutate points[] array that was passed to constructor
          mutate points[] array that was passed to constructor
          collinear.numberOfSegments() -> 4
    - failed on trial 1 of 100

==> FAILED

Test 14: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 15: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 16: throws an exception if either constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 17: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 10/21 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00        3640           0           3640                  120
=> passed    32   0.00       71920           0          71920                  496
=> passed    64   0.01     1270752           0        1270752                 2016
=> passed   128   0.02    21336000           0       21336000                 8128
=> passed   256   0.86   349585280           0      349585280                32640
==> 5/5 tests passed

Test 2a-2e: Find collinear points among n/4 arbitrary line segments


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00        3709           0           3709                  142
=> passed    32   0.00       72121           0          72121                  540
=> passed    64   0.01     1271773           0        1271773                 2100
=> passed   128   0.08    21340013           0       21340013                 8292
=> passed   256   1.24   349601835           0      349601835                32982
==> 5/5 tests passed

Total: 10/10 tests passed!


================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1g: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> FAILED    64   0.07      262080     1235115        2732310  (12.0x)        2016
=> FAILED   128   0.33     2097024    11984482       26065988  (24.7x)        8128
=> FAILED   256   1.61    16776960   112995345      242767650  (50.3x)       32640
=> FAILED   512  18.12   134217216  1039782800     2213782816 (102.5x)      130816
Aborting: time limit of 10 seconds exceeded

Test 2a-2g: Find collinear points among the n points on an n-by-1 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> FAILED    64   0.02      262080      300132         862344   (9.9x)       21162
=> FAILED   128   0.05     2097024     2260092        6617208  (19.5x)      101052
=> FAILED   256   0.27    16776960    17522835       51822630  (38.7x)      472402   (1.2x)
=> FAILED   512   1.98   134217216   137662889      409542994  (77.2x)     2152078   (1.5x)
=> FAILED  1024  15.51  1073740800  1089521598     3252783996 (154.0x)     9653984   (1.7x)
Aborting: time limit of 10 seconds exceeded

Test 3a-3g: Find collinear points among the n points on an n/4-by-4 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------

    java.lang.ArrayIndexOutOfBoundsException: Index 63 out of bounds for length 63

    FastCollinearPoints.segments(FastCollinearPoints.java:90)
    TimeFastCollinearPoints.timingTest(TimeFastCollinearPoints.java:94)
    TimeFastCollinearPoints.time(TimeFastCollinearPoints.java:221)
    TimeFastCollinearPoints.timeGrid4(TimeFastCollinearPoints.java:178)
    TimeFastCollinearPoints.main(TimeFastCollinearPoints.java:279)

Test 4a-4g: Find collinear points among the n points on an n/8-by-8 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------

    java.lang.ArrayIndexOutOfBoundsException: Index 63 out of bounds for length 63

    FastCollinearPoints.segments(FastCollinearPoints.java:90)
    TimeFastCollinearPoints.timingTest(TimeFastCollinearPoints.java:94)
    TimeFastCollinearPoints.time(TimeFastCollinearPoints.java:221)
    TimeFastCollinearPoints.timeGrid8(TimeFastCollinearPoints.java:203)
    TimeFastCollinearPoints.main(TimeFastCollinearPoints.java:283)

Total: 0/31 tests passed!


================================================================


