See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     PASSED
PMD:          PASSED
Checkstyle:   PASSED

Correctness:  26/35 tests passed
Memory:       16/16 tests passed
Timing:       34/42 tests passed

Aggregate score: 80.76%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
5.0K Apr 17 14:38 KdTree.java
2.3K Apr 17 14:38 PointSET.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: insert n random points; check size() and isEmpty() after each insertion
        (size may be less than n because of duplicates)
  * 5 random points in a 1-by-1 grid
  * 50 random points in a 8-by-8 grid
  * 100 random points in a 16-by-16 grid
  * 1000 random points in a 128-by-128 grid
  * 5000 random points in a 1024-by-1024 grid
  * 50000 random points in a 65536-by-65536 grid
==> passed

Test 2: insert n random points; check contains() with random query points
  * 1 random points in a 1-by-1 grid
  * 10 random points in a 4-by-4 grid
  * 20 random points in a 8-by-8 grid
  * 10000 random points in a 128-by-128 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 65536-by-65536 grid
==> passed

Test 3: insert random points; check nearest() with random query points
  * 10 random points in a 4-by-4 grid
  * 15 random points in a 8-by-8 grid
  * 20 random points in a 16-by-16 grid
  * 100 random points in a 32-by-32 grid
  * 10000 random points in a 65536-by-65536 grid
==> passed

Test 4: insert random points; check range() with random query rectangles
  * 2 random points and random rectangles in a 2-by-2 grid
  * 10 random points and random rectangles in a 4-by-4 grid
  * 20 random points and random rectangles in a 8-by-8 grid
  * 100 random points and random rectangles in a 16-by-16 grid
  * 1000 random points and random rectangles in a 64-by-64 grid
  * 10000 random points and random rectangles in a 128-by-128 grid
==> passed

Test 5: call methods before inserting any points
 * size() and isEmpty()
 * contains()
 * nearest()
 * range()
==> passed

Test 6: call methods with null argument
  * insert()
  * contains()
  * range()
  * nearest()
==> passed

Test 7: check intermixed sequence of calls to insert(), isEmpty(),
        size(), contains(), range(), and nearest() with
        probabilities (p1, p2, p3, p4, p5, p6, p7), respectively
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 16-by-16 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 128-by-128 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 65536-by-65536 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
==> passed

Test 8: check that two PointSET objects can be created at the same time
==> passed


Total: 8/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
Running 27 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 50000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
  * 10 random general points in a 4-by-4 grid
  * 50 random general points in a 8-by-8 grid
  * 100000 random general points in a 16-by-16 grid
  * 100000 random general points in a 128-by-128 grid
  * 100000 random general points in a 1024-by-1024 grid
==> passed

Test 2a: insert points from file; check contains() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 2b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 2c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 2d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==> passed

Test 3a: insert points from file; check range() with random query rectangles
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 3b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
==> passed

Test 3c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
  * 10 random distinct points and random rectangles in a 4-by-4 grid
  * 20 random distinct points and random rectangles in a 8-by-8 grid
  * 100 random distinct points and random rectangles in a 16-by-16 grid
  * 1000 random distinct points and random rectangles in a 64-by-64 grid
  * 10000 random distinct points and random rectangles in a 128-by-128 grid
==> passed

Test 3d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid
  * 5000 random general points and random rectangles in a 16-by-16 grid
  * 5000 random general points and random rectangles in a 128-by-128 grid
  * 5000 random general points and random rectangles in a 1024-by-1024 grid
==> passed

Test 3e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid
  * 10 tiny rectangles and 10 general points in a 4-by-4 grid
  * 20 tiny rectangles and 20 general points in a 8-by-8 grid
  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid
  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
==> passed

Test 4a: insert points from file; check range() with random query rectangles
         and check traversal of kd-tree
  * input5.txt
  * input10.txt
==> passed

Test 4b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of kd-tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
==> passed

Test 5a: insert points from file; check nearest() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
    - failed on trial 2 of 10000
    - sequence of points inserted:
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - query point                   = (0.013, 0.46)
    - student   nearest()           = (0.4, 0.7)
    - reference nearest()           = (0.2, 0.3)
    - student   distanceSquaredTo() = 0.207369
    - reference distanceSquaredTo() = 0.060569

  * input10.txt
    - failed on trial 1 of 10000
    - sequence of points inserted:
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - query point                   = (0.928, 0.091)
    - student   nearest()           = (0.564, 0.413)
    - reference nearest()           = (0.499, 0.208)
    - student   distanceSquaredTo() = 0.23618
    - reference distanceSquaredTo() = 0.19773

==> FAILED

Test 5b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - sequence of points inserted:
      A  0.875 0.875
      B  1.0 0.75
      C  0.375 0.25
      D  0.125 0.5
      E  0.25 0.375
    - query point                   = (0.75, 0.125)
    - student   nearest()           = (1.0, 0.75)
    - reference nearest()           = (0.375, 0.25)
    - student   distanceSquaredTo() = 0.453125
    - reference distanceSquaredTo() = 0.15625

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - sequence of points inserted:
      A  0.25 0.5625
      B  0.8125 0.6875
      C  0.75 0.875
      D  0.5 0.375
      E  0.3125 0.125
      F  0.5625 0.0
      G  0.625 0.0625
      H  0.1875 0.75
      I  0.375 0.9375
      J  0.0625 0.625
    - query point                   = (0.0, 0.3125)
    - student   nearest()           = (0.25, 0.5625)
    - reference nearest()           = (0.0625, 0.625)
    - student   distanceSquaredTo() = 0.125
    - reference distanceSquaredTo() = 0.1015625

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - sequence of points inserted:
      A  0.03125 0.25
      B  0.6875 0.46875
      C  0.25 0.5
      D  0.125 0.21875
      E  0.90625 0.1875
      F  0.71875 0.71875
      G  0.1875 0.75
      H  0.78125 0.0625
      I  0.625 0.65625
      J  0.875 0.625
      K  0.84375 0.3125
      L  0.40625 0.0
      M  0.5 0.96875
      N  0.21875 0.125
      O  0.34375 0.375
      P  0.75 0.90625
      Q  0.9375 1.0
      R  0.15625 0.84375
      S  0.0625 0.53125
      T  0.4375 0.03125
    - query point                   = (0.46875, 0.09375)
    - student   nearest()           = (0.125, 0.21875)
    - reference nearest()           = (0.4375, 0.03125)
    - student   distanceSquaredTo() = 0.1337890625
    - reference distanceSquaredTo() = 0.0048828125

  * 30 random non-degenerate points in a 64-by-64 grid
    - failed on trial 1 of 10000
    - query point                   = (0.03125, 0.65625)
    - student   nearest()           = (0.015625, 0.453125)
    - reference nearest()           = (0.21875, 0.59375)
    - student   distanceSquaredTo() = 0.04150390625
    - reference distanceSquaredTo() = 0.0390625

  * 10000 random non-degenerate points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point                   = (0.010040283203125, 0.667816162109375)
    - student   nearest()           = (9.46044921875E-4, 0.668182373046875)
    - reference nearest()           = (0.0105743408203125, 0.6659698486328125)
    - student   distanceSquaredTo() = 0.000082839280367
    - reference distanceSquaredTo() = 0.000003694090992

==> FAILED

Test 5c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
    - failed on trial 2 of 10000
    - sequence of points inserted:
      A  1.0 0.0
      B  1.0 0.5
      C  1.0 1.0
      D  0.25 1.0
      E  0.5 0.25
      F  0.25 0.5
      G  0.75 1.0
      H  0.5 0.5
      I  0.0 0.25
      J  0.0 0.5
    - query point                   = (0.0, 0.75)
    - student   nearest()           = (1.0, 1.0)
    - reference nearest()           = (0.0, 0.5)
    - student   distanceSquaredTo() = 1.0625
    - reference distanceSquaredTo() = 0.0625

  * 15 random distinct points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - sequence of points inserted:
      A  1.0 0.75
      B  1.0 0.375
      C  0.375 0.875
      D  0.75 0.75
      E  0.5 0.875
      F  0.125 0.875
      G  0.875 0.25
      H  0.75 1.0
      I  1.0 1.0
      J  0.0 0.125
      K  0.25 0.25
      L  0.25 0.625
      M  0.75 0.125
      N  0.625 0.5
      O  0.0 0.75
    - query point                   = (0.625, 0.375)
    - student   nearest()           = (1.0, 0.375)
    - reference nearest()           = (0.625, 0.5)
    - student   distanceSquaredTo() = 0.140625
    - reference distanceSquaredTo() = 0.015625

  * 20 random distinct points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - sequence of points inserted:
      A  0.3125 0.125
      B  0.3125 0.5
      C  0.0625 0.25
      D  0.3125 0.1875
      E  0.8125 0.75
      F  0.875 0.3125
      G  0.3125 0.625
      H  0.6875 0.5
      I  0.5625 0.5
      J  0.0625 0.5
      K  0.0 1.0
      L  0.6875 0.5625
      M  0.5625 0.4375
      N  0.625 0.6875
      O  1.0 0.1875
      P  0.8125 0.4375
      Q  0.75 0.1875
      R  0.875 0.5
      S  0.4375 0.875
      T  0.375 0.0625
    - query point                   = (0.6875, 0.6875)
    - student   nearest()           = (0.8125, 0.75)
    - reference nearest()           = (0.625, 0.6875)
    - student   distanceSquaredTo() = 0.01953125
    - reference distanceSquaredTo() = 0.00390625

  * 100 random distinct points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - query point                   = (0.15625, 0.125)
    - student   nearest()           = (0.59375, 0.0)
    - reference nearest()           = (0.15625, 0.0625)
    - student   distanceSquaredTo() = 0.20703125
    - reference distanceSquaredTo() = 0.00390625

  * 10000 random distinct points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point                   = (0.9545440673828125, 0.1778717041015625)
    - student   nearest()           = (0.949981689453125, 0.0089569091796875)
    - reference nearest()           = (0.9512481689453125, 0.1743621826171875)
    - student   distanceSquaredTo() = 0.028553023235872
    - reference distanceSquaredTo() = 0.00002317968756

==> FAILED

Test 5d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query point                   = (0.625, 0.6875)
    - student   nearest()           = (0.5625, 0.5)
    - reference nearest()           = (0.625, 0.6875)
    - student   distanceSquaredTo() = 0.0390625
    - reference distanceSquaredTo() = 0

  * 10000 random general points in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query point                   = (0.96875, 0.671875)
    - student   nearest()           = (0.9765625, 0.4375)
    - reference nearest()           = (0.96875, 0.6640625)
    - student   distanceSquaredTo() = 0.05499267578125
    - reference distanceSquaredTo() = 0.00006103515625

  * 10000 random general points in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query point                   = (0.7314453125, 0.396484375)
    - student   nearest()           = (0.853515625, 0.205078125)
    - reference nearest()           = (0.73046875, 0.3935546875)
    - student   distanceSquaredTo() = 0.05153751373291
    - reference distanceSquaredTo() = 0.000009536743164

==> FAILED

Test 6a: insert points from file; check nearest() with random query points
         and check traversal of kd-tree
  * input5.txt
    - student   nearest() = (0.4, 0.7)
    - reference nearest() = (0.4, 0.7)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.09, 0.68)
    - sequence of points inserted:
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C D E
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B D C
    - failed on trial 1 of 1000

  * input10.txt
    - student   nearest() = (0.785, 0.725)
    - reference nearest() = (0.785, 0.725)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.85, 0.73)
    - sequence of points inserted:
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A C B G H I
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B H I
    - failed on trial 1 of 1000

==> FAILED

Test 6b: insert non-degenerate points; check nearest() with random query points
         and check traversal of kd-tree
  * 5 random non-degenerate points in a 8-by-8 grid
    - student   nearest() = (0.625, 0.625)
    - reference nearest() = (0.625, 0.625)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.5, 1.0)
    - sequence of points inserted:
      A  0.625 0.625
      B  0.0 0.875
      C  0.375 0.25
      D  0.75 0.5
      E  0.25 0.0
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B D
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C E D
    - failed on trial 1 of 1000

  * 10 random non-degenerate points in a 16-by-16 grid
    - student   nearest() = (0.9375, 0.5625)
    - reference nearest() = (0.9375, 0.5625)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.6875, 0.625)
    - sequence of points inserted:
      A  0.9375 0.5625
      B  0.4375 0.9375
      C  0.125 1.0
      D  0.3125 0.0625
      E  0.75 0.1875
      F  0.8125 0.3125
      G  1.0 0.5
      H  0.625 0.125
      I  0.5 0.4375
      J  0.375 0.0
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B G
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B D E F I G
    - failed on trial 1 of 1000

  * 20 random non-degenerate points in a 32-by-32 grid
    - student   nearest() = (0.8125, 0.8125)
    - reference nearest() = (0.75, 0.5625)
    - student   distanceSquaredTo() = 0.078125
    - reference distanceSquaredTo() = 0.05078125
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.5625, 0.6875)
    - sequence of points inserted:
      A  0.09375 0.125
      B  0.8125 0.8125
      C  0.28125 0.375
      D  0.1875 0.96875
      E  0.59375 0.40625
      F  0.03125 0.71875
      G  0.46875 0.0
      H  0.4375 0.28125
      I  0.75 0.5625
      J  0.375 0.5
      K  0.78125 0.59375
      L  0.34375 0.78125
      M  0.71875 0.875
      N  0.9375 1.0
      O  0.3125 0.9375
      P  0.21875 0.3125
      Q  0.53125 0.1875
      R  0.84375 0.15625
      S  0.0 0.4375
      T  0.0625 0.03125
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A F S B C D
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C E I J L K D M N O
    - failed on trial 1 of 1000

  * 30 random non-degenerate points in a 64-by-64 grid
    - student   nearest() = (0.296875, 0.953125)
    - reference nearest() = (0.65625, 0.84375)
    - student   distanceSquaredTo() = 0.097900390625
    - reference distanceSquaredTo() = 0.017822265625
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 7
    - number of reference entries = 15
    - entry 1 of the two sequences are not equal
    - student   entry 1 = (0.203125, 0.9375)
    - reference entry 1 = (0.671875, 0.15625)

    - failed on trial 1 of 1000

  * 50 random non-degenerate points in a 128-by-128 grid
    - student   nearest() = (0.375, 0.953125)
    - reference nearest() = (0.8515625, 0.96875)
    - student   distanceSquaredTo() = 0.3092041015625
    - reference distanceSquaredTo() = 0.00665283203125
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 3
    - number of reference entries = 7
    - entry 1 of the two sequences are not equal
    - student   entry 1 = (0.09375, 0.109375)
    - reference entry 1 = (0.703125, 0.375)

    - failed on trial 1 of 1000

  * 1000 random non-degenerate points in a 2048-by-2048 grid
    - student   nearest() = (0.794921875, 0.90966796875)
    - reference nearest() = (0.5673828125, 0.9541015625)
    - student   distanceSquaredTo() = 0.046433448791504
    - reference distanceSquaredTo() = 0.000272989273071
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 3
    - number of reference entries = 19
    - entry 2 of the two sequences are not equal
    - student   entry 2 = (0.80419921875, 0.8916015625)
    - reference entry 2 = (0.70263671875, 0.1005859375)

    - failed on trial 1 of 1000

==> FAILED

Test 7: check with no points
  * size() and isEmpty()
  * contains()
  * nearest()
  * range()
==> passed

Test 8: check that the specified exception is thrown with null arguments
  * argument to insert() is null
  * argument to contains() is null
  * argument to range() is null
  * argument to nearest() is null
==> passed

Test 9a: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 20 of 20000
    - student   nearest()  = (0.5, 0.5625)
    - reference nearest()  = (0.9375, 0.8125)
    - student   distanceSquaredTo() = 0.1328125
    - reference distanceSquaredTo() = 0.01953125
    - sequence of operations was:
           st.insert(0.5, 0.5625)
           st.range([0.0, 0.875] x [0.125, 0.3125])  ==>  empty
           st.nearest((0.6875, 0.3125))   ==>  (0.5, 0.5625)
           st.insert(0.875, 0.25)
           st.insert(0.25, 0.625)
           st.insert(0.9375, 0.8125)
           st.nearest((0.1875, 0.0))   ==>  (0.25, 0.625)
           st.insert(0.0, 0.5)
           st.insert(0.625, 1.0)
           st.size()  ==>  6
           st.insert(0.4375, 0.9375)
           st.contains((0.8125, 0.3125))  ==>  false
           st.nearest((0.8125, 0.0625))   ==>  (0.875, 0.25)
           st.nearest((0.1875, 0.0625))   ==>  (0.0, 0.5)
           st.contains((0.375, 0.875))  ==>  false
           st.insert(0.0625, 0.875)
           st.isEmpty()  ==>  false
           st.size()  ==>  8
           st.isEmpty()  ==>  false
           st.nearest((0.8125, 0.75))   ==>  (0.5, 0.5625)

  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 30 of 20000
    - student   nearest()  = (0.1875, 0.09375)
    - reference nearest()  = (0.21875, 0.40625)
    - student   distanceSquaredTo() = 0.08819580078125
    - reference distanceSquaredTo() = 0.02471923828125

  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 27 of 20000
    - student   nearest()  = (0.1962890625, 0.603515625)
    - reference nearest()  = (0.32421875, 0.9345703125)
    - student   distanceSquaredTo() = 0.136255264282227
    - reference distanceSquaredTo() = 0.003852844238281

  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 16 of 20000
    - student   nearest()  = (0.5865478515625, 0.2744140625)
    - reference nearest()  = (0.238525390625, 0.3411865234375)
    - student   distanceSquaredTo() = 0.056760087609291
    - reference distanceSquaredTo() = 0.053865268826485
    - sequence of operations was:
           st.insert(0.5865478515625, 0.2744140625)
           st.nearest((0.6312255859375, 0.821044921875))   ==>  (0.5865478515625, 0.2744140625)
           st.insert(0.826171875, 0.209716796875)
           st.contains((0.4471435546875, 0.4622802734375))  ==>  false
           st.contains((0.1820068359375, 0.12646484375))  ==>  false
           st.range([0.0633544921875, 0.23046875] x [0.3800048828125, 0.799072265625])  ==>  empty
           st.nearest((0.016357421875, 0.8970947265625))   ==>  (0.5865478515625, 0.2744140625)
           st.range([0.2874755859375, 0.5240478515625] x [0.20458984375, 0.5595703125])  ==>  empty
           st.range([0.2349853515625, 0.246337890625] x [0.1854248046875, 0.80810546875])  ==>  empty
           st.range([0.0299072265625, 0.4747314453125] x [0.2232666015625, 0.338623046875])  ==>  empty
           st.insert(0.284912109375, 0.9447021484375)
           st.insert(0.6568603515625, 0.705078125)
           st.contains((0.2413330078125, 0.9532470703125))  ==>  false
           st.insert(0.238525390625, 0.3411865234375)
           st.isEmpty()  ==>  false
           st.nearest((0.37939453125, 0.15673828125))   ==>  (0.5865478515625, 0.2744140625)

  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 10 of 20000
    - student   nearest()  = (0.164459228515625, 0.33746337890625)
    - reference nearest()  = (0.252410888671875, 0.5899200439453125)
    - student   distanceSquaredTo() = 0.174771484453231
    - reference distanceSquaredTo() = 0.02354714856483
    - sequence of operations was:
           st.insert(0.164459228515625, 0.33746337890625)
           st.insert(0.1416015625, 0.3390960693359375)
           st.range([0.08489990234375, 0.799102783203125] x [0.018890380859375, 0.434967041015625])  ==>  Z I
           st.insert(0.650360107421875, 0.1475830078125)
           st.insert(0.334136962890625, 0.5458526611328125)
           st.nearest((0.5751800537109375, 0.0515899658203125))   ==>  (0.650360107421875, 0.1475830078125)
           st.insert(0.5250244140625, 0.9656829833984375)
           st.insert(0.886688232421875, 0.8428192138671875)
           st.insert(0.252410888671875, 0.5899200439453125)
           st.nearest((0.2674713134765625, 0.7426300048828125))   ==>  (0.164459228515625, 0.33746337890625)

==> FAILED

Test 9b: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 32 of 20000
    - student   nearest()  = (1.0, 0.125)
    - reference nearest()  = (0.75, 0.375)
    - student   distanceSquaredTo() = 0.09765625
    - reference distanceSquaredTo() = 0.00390625

  * 20000 calls with distinct points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 20 of 20000
    - student   nearest()  = (0.9609375, 0.1953125)
    - reference nearest()  = (0.5625, 0.765625)
    - student   distanceSquaredTo() = 0.12701416015625
    - reference distanceSquaredTo() = 0.12115478515625
    - sequence of operations was:
           st.insert(0.9609375, 0.1953125)
           st.insert(0.2578125, 0.9609375)
           st.contains((0.4765625, 0.9453125))  ==>  false
           st.nearest((0.2734375, 0.5625))   ==>  (0.2578125, 0.9609375)
           st.nearest((0.453125, 0.8828125))   ==>  (0.2578125, 0.9609375)
           st.nearest((0.15625, 0.90625))   ==>  (0.2578125, 0.9609375)
           st.nearest((0.421875, 0.671875))   ==>  (0.2578125, 0.9609375)
           st.range([0.3046875, 0.9921875] x [0.1640625, 0.8515625])  ==>  W
           st.contains((0.15625, 0.0859375))  ==>  false
           st.contains((0.3046875, 0.6875))  ==>  false
           st.nearest((0.1015625, 0.984375))   ==>  (0.2578125, 0.9609375)
           st.nearest((0.78125, 0.5))   ==>  (0.9609375, 0.1953125)
           st.insert(0.0703125, 0.8515625)
           st.insert(0.5, 0.1953125)
           st.contains((0.53125, 0.8984375))  ==>  false
           st.insert(0.5625, 0.765625)
           st.range([0.15625, 0.65625] x [0.40625, 0.6171875])  ==>  empty
           st.nearest((0.015625, 0.78125))   ==>  (0.0703125, 0.8515625)
           st.insert(0.0859375, 0.0625)
           st.nearest((0.8046875, 0.515625))   ==>  (0.9609375, 0.1953125)

  * 20000 calls with distinct points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 17 of 20000
    - student   nearest()  = (0.2421875, 0.8193359375)
    - reference nearest()  = (0.685546875, 0.76171875)
    - student   distanceSquaredTo() = 0.471329689025879
    - reference distanceSquaredTo() = 0.428018569946289
    - sequence of operations was:
           st.size()  ==>  0
           st.insert(0.2421875, 0.8193359375)
           st.nearest((0.0615234375, 0.2978515625))   ==>  (0.2421875, 0.8193359375)
           st.contains((0.25390625, 0.7763671875))  ==>  false
           st.insert(0.5517578125, 0.876953125)
           st.isEmpty()  ==>  false
           st.insert(0.5380859375, 0.9921875)
           st.range([0.4287109375, 0.654296875] x [0.3798828125, 0.65234375])  ==>  empty
           st.insert(0.685546875, 0.76171875)
           st.size()  ==>  4
           st.nearest((0.8115234375, 0.7021484375))   ==>  (0.685546875, 0.76171875)
           st.nearest((0.3134765625, 0.3779296875))   ==>  (0.2421875, 0.8193359375)
           st.isEmpty()  ==>  false
           st.range([0.1123046875, 0.3662109375] x [0.2509765625, 0.322265625])  ==>  empty
           st.range([0.5947265625, 0.6455078125] x [0.044921875, 0.8818359375])  ==>  empty
           st.nearest((0.2099609375, 0.3857421875))   ==>  (0.2421875, 0.8193359375)
           st.nearest((0.4306640625, 0.1591796875))   ==>  (0.2421875, 0.8193359375)

  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 20 of 20000
    - student   nearest()  = (0.703369140625, 0.4732666015625)
    - reference nearest()  = (0.92919921875, 0.8134765625)
    - student   distanceSquaredTo() = 0.115405827760696
    - reference distanceSquaredTo() = 0.064781621098518
    - sequence of operations was:
           st.insert(0.703369140625, 0.4732666015625)
           st.insert(0.948974609375, 0.1268310546875)
           st.contains((0.784912109375, 0.9208984375))  ==>  false
           st.contains((0.1658935546875, 0.39453125))  ==>  false
           st.range([0.2994384765625, 0.85302734375] x [0.087158203125, 0.4310302734375])  ==>  empty
           st.contains((0.856201171875, 0.771728515625))  ==>  false
           st.range([0.1005859375, 0.70361328125] x [0.4237060546875, 0.4923095703125])  ==>  A
           st.contains((0.395751953125, 0.1209716796875))  ==>  false
           st.contains((0.2802734375, 0.223388671875))  ==>  false
           st.insert(0.146240234375, 0.5372314453125)
           st.contains((0.437255859375, 0.3067626953125))  ==>  false
           st.nearest((0.507080078125, 0.2318115234375))   ==>  (0.703369140625, 0.4732666015625)
           st.insert(0.92919921875, 0.8134765625)
           st.insert(0.873046875, 0.3079833984375)
           st.range([0.6563720703125, 0.9984130859375] x [0.3177490234375, 0.9088134765625])  ==>  A H
           st.size()  ==>  5
           st.contains((0.0682373046875, 0.21240234375))  ==>  false
           st.insert(0.99365234375, 0.9332275390625)
           st.nearest((0.6876220703125, 0.3377685546875))   ==>  (0.703369140625, 0.4732666015625)
           st.nearest((0.6746826171875, 0.811767578125))   ==>  (0.703369140625, 0.4732666015625)

  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 18 of 20000
    - student   nearest()  = (0.5088958740234375, 0.9243621826171875)
    - reference nearest()  = (0.8231201171875, 0.66455078125)
    - student   distanceSquaredTo() = 0.164766337955371
    - reference distanceSquaredTo() = 0.104300217935815
    - sequence of operations was:
           st.size()  ==>  0
           st.insert(0.71710205078125, 0.4889984130859375)
           st.insert(0.7513427734375, 0.37579345703125)
           st.insert(0.8231201171875, 0.66455078125)
           st.range([0.2476959228515625, 0.7018890380859375] x [0.345733642578125, 0.652313232421875])  ==>  empty
           st.insert(0.8607330322265625, 0.21368408203125)
           st.contains((0.724609375, 0.7779998779296875))  ==>  false
           st.contains((0.8892974853515625, 0.1867218017578125))  ==>  false
           st.insert(0.5088958740234375, 0.9243621826171875)
           st.contains((0.860260009765625, 0.60931396484375))  ==>  false
           st.nearest((0.1151123046875, 0.2506866455078125))   ==>  (0.71710205078125, 0.4889984130859375)
           st.nearest((0.3893890380859375, 0.7920989990234375))   ==>  (0.5088958740234375, 0.9243621826171875)
           st.insert(0.1399383544921875, 0.794830322265625)
           st.insert(0.8693084716796875, 0.4569244384765625)
           st.range([0.2861785888671875, 0.791595458984375] x [0.1005401611328125, 0.7862396240234375])  ==>  I S
           st.insert(0.568084716796875, 0.1791534423828125)
           st.contains((0.7163848876953125, 0.97625732421875))  ==>  false
           st.nearest((0.91162109375, 0.9751434326171875))   ==>  (0.5088958740234375, 0.9243621826171875)

==> FAILED

Test 9c: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 35 of 20000
    - student   nearest()  = (1.0, 0.0)
    - reference nearest()  = (0.0, 0.0)
    - student   distanceSquaredTo() = 1
    - reference distanceSquaredTo() = 0

  * 20000 calls with general points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 25 of 20000
    - student   nearest()  = (0.4375, 0.25)
    - reference nearest()  = (0.25, 0.5)
    - student   distanceSquaredTo() = 0.09765625
    - reference distanceSquaredTo() = 0.078125
    - sequence of operations was:
           st.size()  ==>  0
           st.insert(0.4375, 0.8125)
           st.insert(0.4375, 0.25)
           st.nearest((0.5625, 0.625))   ==>  (0.4375, 0.8125)
           st.nearest((0.75, 0.125))   ==>  (0.4375, 0.25)
           st.insert(0.8125, 0.6875)
           st.range([0.3125, 0.9375] x [0.0, 0.4375])  ==>  V
           st.nearest((0.3125, 0.0625))   ==>  (0.4375, 0.25)
           st.contains((0.4375, 0.0))  ==>  false
           st.insert(0.25, 0.5)
           st.nearest((0.4375, 0.875))   ==>  (0.4375, 0.8125)
           st.contains((0.75, 0.0))  ==>  false
           st.nearest((0.25, 0.9375))   ==>  (0.4375, 0.8125)
           st.range([0.25, 0.3125] x [0.4375, 0.5625])  ==>  T
           st.insert(0.0625, 0.8125)
           st.nearest((0.5625, 0.4375))   ==>  (0.4375, 0.25)
           st.nearest((0.875, 0.3125))   ==>  (0.8125, 0.6875)
           st.contains((0.25, 0.5))  ==>  true
           st.size()  ==>  5
           st.range([0.625, 0.75] x [0.3125, 0.9375])  ==>  empty
           st.nearest((0.5625, 0.75))   ==>  (0.4375, 0.8125)
           st.range([0.25, 0.5] x [0.125, 0.75])  ==>  T V
           st.range([0.625, 0.8125] x [0.125, 0.5])  ==>  empty
           st.insert(0.9375, 0.3125)
           st.nearest((0.125, 0.25))   ==>  (0.4375, 0.25)

  * 20000 calls with general points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 35 of 20000
    - student   nearest()  = (0.765625, 0.0859375)
    - reference nearest()  = (0.796875, 0.2109375)
    - student   distanceSquaredTo() = 0.010986328125
    - reference distanceSquaredTo() = 0.001220703125

  * 20000 calls with general points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 32 of 20000
    - student   nearest()  = (0.9462890625, 0.203125)
    - reference nearest()  = (0.2578125, 0.271484375)
    - student   distanceSquaredTo() = 0.271595001220703
    - reference distanceSquaredTo() = 0.029290199279785

  * 20000 calls with general points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 30 of 20000
    - student   nearest()  = (0.3775634765625, 0.413818359375)
    - reference nearest()  = (0.614501953125, 0.71240234375)
    - student   distanceSquaredTo() = 0.283235386013985
    - reference distanceSquaredTo() = 0.038269519805908

  * 20000 calls with general points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 19 of 20000
    - student   nearest()  = (0.1451416015625, 0.1066436767578125)
    - reference nearest()  = (0.0701141357421875, 0.2470245361328125)
    - student   distanceSquaredTo() = 0.033996711717919
    - reference distanceSquaredTo() = 0.001228318549693
    - sequence of operations was:
           st.size()  ==>  0
           st.insert(0.0837249755859375, 0.899505615234375)
           st.size()  ==>  1
           st.insert(0.5172576904296875, 0.4801788330078125)
           st.insert(0.1451416015625, 0.1066436767578125)
           st.insert(0.394012451171875, 0.2724456787109375)
           st.nearest((0.9061431884765625, 0.1885223388671875))   ==>  (0.5172576904296875, 0.4801788330078125)
           st.insert(0.9513397216796875, 0.1177520751953125)
           st.isEmpty()  ==>  false
           st.contains((0.1833648681640625, 0.594512939453125))  ==>  false
           st.nearest((0.2433013916015625, 0.9004669189453125))   ==>  (0.0837249755859375, 0.899505615234375)
           st.insert(0.9474334716796875, 0.108062744140625)
           st.insert(0.27044677734375, 0.3177032470703125)
           st.insert(0.9668731689453125, 0.7346649169921875)
           st.range([0.3066558837890625, 0.5666656494140625] x [0.775665283203125, 0.9796905517578125])  ==>  empty
           st.insert(0.0701141357421875, 0.2470245361328125)
           st.range([0.1741790771484375, 0.571136474609375] x [0.3627471923828125, 0.63446044921875])  ==>  J
           st.insert(0.979461669921875, 0.5241546630859375)
           st.nearest((0.0360565185546875, 0.2552947998046875))   ==>  (0.1451416015625, 0.1066436767578125)

==> FAILED

Test 10: insert n random points into two different KdTree objects;
        check that repeated calls to size(), contains(), range(),
        and nearest() with the same arguments yield same results
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 100 random general points in a 128-by-128 grid
  * 1000 random general points in a 65536-by-65536 grid
==> passed


Total: 18/27 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes

================================================================



Analyzing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes

================================================================



Analyzing memory of PointSET
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a PointSET with n points (including Point2D and RectHV objects).
Maximum allowed memory is 96n + 200 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          240                264
=> passed        2          336                360
=> passed        5          624                648
=> passed       10         1104               1128
=> passed       25         2544               2568
=> passed      100         9744               9768
=> passed      400        38544              38568
=> passed      800        76944              76968
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 96.00 n + 144.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)

================================================================



Analyzing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with n points (including Point2D and RectHV objects).
Maximum allowed memory is 312n + 192 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          136                160
=> passed        2          224                288
=> passed        5          488                672
=> passed       10          928               1312
=> passed       25         2248               3232
=> passed      100         8848              12832
=> passed      400        35248              51232
=> passed      800        70448             102432
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 88.00 n + 48.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 14 total tests.


Inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000    1518731
=> passed   320000    1347543
=> passed   640000    1328394
=> passed  1280000    1011383
==> 4/4 tests passed

Performing contains() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000     653871
=> passed   320000     612911
=> passed   640000     622717
=> passed  1280000     488375
==> 4/4 tests passed

Performing range() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       4592
=> passed    20000       1538
=> passed    40000        660
==> 3/3 tests passed

Performing nearest() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       5675
=> passed    20000       1864
=> passed    40000        751
==> 3/3 tests passed

Total: 14/14 tests passed!


================================================================



Timing KdTree
*-----------------------------------------------------------
Running 28 total tests.


Test 1a-d: Insert n points into a 2d tree. The table gives the average number of calls
           to methods in RectHV and Point per call to insert().

                                                                                                Point2D
               n      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=> passed   160000    1301902               0.0              44.3              42.3              21.6
=> passed   320000     901476               0.0              45.1              43.1              22.0
=> passed   640000     691857               0.0              48.1              46.1              23.5
=> passed  1280000     619478               0.0              52.3              50.3              25.6
==> 4/4 tests passed


Test 2a-h: Perform contains() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to contains().

                                                                               Point2D
               n      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=> passed    10000    1111094              37.0              35.0              18.0
=> passed    20000    1176913              39.3              37.3              19.2
=> passed    40000    1016653              43.6              41.6              21.3
=> passed    80000     801629              44.0              42.0              21.5
=> passed   160000     707279              46.5              44.5              22.7
=> passed   320000     607386              50.1              48.1              24.5
=> passed   640000     471063              51.4              49.4              25.2
=> passed  1280000     561346              54.4              52.4              26.7
==> 8/8 tests passed


Test 3a-h: Perform range() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to range().

               n      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=> passed    10000     343240              50.4              31.1              81.9              42.5
=> passed    20000     481121              52.7              32.6              85.9              48.8
=> passed    40000     419537              64.9              39.3             103.2              52.7
=> passed    80000     303506              67.1              40.7             106.5              55.0
=> passed   160000     318854              70.0              42.5             113.1              63.2
=> passed   320000     260292              67.0              40.2             105.7              55.7
=> passed   640000     198628              72.0              43.3             113.8              62.6
=> passed  1280000     158148              78.7              47.0             123.0              60.1
==> 8/8 tests passed


Test 4a-h: Perform nearest() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               n      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=> FAILED    10000  1590266                   6.9                    0.0                     0.0   (0.0x)      0.0   (0.0x)
=> FAILED    20000  1575220                  12.7                    0.0                     0.0   (0.0x)      0.0   (0.0x)
=> FAILED    40000  1637962                   9.5                    0.0                     0.0   (0.0x)      0.0   (0.0x)
=> FAILED    80000  1748816                   5.0                    0.0                     0.0   (0.0x)      0.0   (0.0x)
=> FAILED   160000  1665176                   6.8                    0.0                     0.0   (0.0x)      0.0   (0.0x)
=> FAILED   320000  1649436                   7.5                    0.0                     0.0   (0.0x)      0.0   (0.0x)
=> FAILED   640000  1575625                   7.5                    0.0                     0.0   (0.0x)      0.0   (0.0x)
=> FAILED  1280000  1655483                   6.6                    0.0                     0.0   (0.0x)      0.0   (0.0x)
==> 0/8 tests passed



Total: 20/28 tests passed!


================================================================
