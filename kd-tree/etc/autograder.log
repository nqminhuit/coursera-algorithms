See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     PASSED
PMD:          FAILED (2 warnings)
Checkstyle:   FAILED (0 errors, 8 warnings)

Correctness:  18/35 tests passed
Memory:       16/16 tests passed
Timing:       34/42 tests passed

Aggregate score: 67.05%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
4.9K Apr 17 11:24 KdTree.java
2.3K Apr 17 11:24 PointSET.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------
KdTree.java:188: The private instance (or static) variable 'level' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PointSET.java:11: The private instance (or static) variable 'points' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 2 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] KdTree.java:133:16: The parameter variable 'x_min' must start with a lowercase letter and use camelCase. [ParameterName]
[WARN] KdTree.java:133:30: The parameter variable 'y_min' must start with a lowercase letter and use camelCase. [ParameterName]
[WARN] KdTree.java:133:44: The parameter variable 'x_max' must start with a lowercase letter and use camelCase. [ParameterName]
[WARN] KdTree.java:133:58: The parameter variable 'y_max' must start with a lowercase letter and use camelCase. [ParameterName]
[WARN] KdTree.java:192:22: The instance variable 'left_below' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] KdTree.java:192:34: The instance variable 'right_above' must start with a lowercase letter and use camelCase. [MemberName]
Checkstyle ends with 0 errors and 6 warnings.

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------
[WARN] PointSET.java:79:40: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
Checkstyle ends with 0 errors and 1 warning.

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------
[WARN] KdTree.java:174:41: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
Checkstyle ends with 0 errors and 1 warning.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: insert n random points; check size() and isEmpty() after each insertion
        (size may be less than n because of duplicates)
  * 5 random points in a 1-by-1 grid
  * 50 random points in a 8-by-8 grid
  * 100 random points in a 16-by-16 grid
  * 1000 random points in a 128-by-128 grid
  * 5000 random points in a 1024-by-1024 grid
  * 50000 random points in a 65536-by-65536 grid
==> passed

Test 2: insert n random points; check contains() with random query points
  * 1 random points in a 1-by-1 grid
  * 10 random points in a 4-by-4 grid
  * 20 random points in a 8-by-8 grid
  * 10000 random points in a 128-by-128 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 65536-by-65536 grid
==> passed

Test 3: insert random points; check nearest() with random query points
  * 10 random points in a 4-by-4 grid
  * 15 random points in a 8-by-8 grid
  * 20 random points in a 16-by-16 grid
  * 100 random points in a 32-by-32 grid
  * 10000 random points in a 65536-by-65536 grid
==> passed

Test 4: insert random points; check range() with random query rectangles
  * 2 random points and random rectangles in a 2-by-2 grid
  * 10 random points and random rectangles in a 4-by-4 grid
  * 20 random points and random rectangles in a 8-by-8 grid
  * 100 random points and random rectangles in a 16-by-16 grid
  * 1000 random points and random rectangles in a 64-by-64 grid
  * 10000 random points and random rectangles in a 128-by-128 grid
==> passed

Test 5: call methods before inserting any points
 * size() and isEmpty()
 * contains()
 * nearest()
 * range()
==> passed

Test 6: call methods with null argument
  * insert()
  * contains()
  * range()
  * nearest()
==> passed

Test 7: check intermixed sequence of calls to insert(), isEmpty(),
        size(), contains(), range(), and nearest() with
        probabilities (p1, p2, p3, p4, p5, p6, p7), respectively
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 16-by-16 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 128-by-128 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 65536-by-65536 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
==> passed

Test 8: check that two PointSET objects can be created at the same time
==> passed


Total: 8/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
Running 27 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 50000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
    - failed after inserting point 3 of 5
    - student   size()    = 3
    - reference size()    = 2
    - student   isEmpty() = false
    - reference isEmpty() = false
    - sequence of points inserted:
      A  1.0 0.0
      B  0.0 0.0
      C  1.0 0.0

  * 10 random general points in a 4-by-4 grid
    - failed after inserting point 6 of 10
    - student   size()    = 6
    - reference size()    = 5
    - student   isEmpty() = false
    - reference isEmpty() = false
    - sequence of points inserted:
      A  0.5 0.5
      B  0.5 0.25
      C  1.0 0.75
      D  0.0 1.0
      E  0.75 0.0
      F  1.0 0.75

  * 50 random general points in a 8-by-8 grid
    - failed after inserting point 8 of 50
    - student   size()    = 8
    - reference size()    = 7
    - student   isEmpty() = false
    - reference isEmpty() = false
    - sequence of points inserted:
      A  0.625 0.375
      B  0.25 1.0
      C  0.625 0.25
      D  0.375 0.875
      E  0.375 1.0
      F  0.25 0.75
      G  1.0 0.125
      H  0.375 1.0

  * 100000 random general points in a 16-by-16 grid
    - failed after inserting point 12 of 100000
    - student   size()    = 12
    - reference size()    = 11
    - student   isEmpty() = false
    - reference isEmpty() = false
    - sequence of points inserted:
      A  0.875 0.1875
      B  0.5 0.125
      C  0.9375 0.5625
      D  0.6875 0.375
      E  0.1875 0.0
      F  0.5625 0.75
      G  0.8125 0.4375
      H  0.375 0.5
      I  0.9375 0.875
      J  0.1875 1.0
      K  1.0 0.9375
      L  1.0 0.9375

  * 100000 random general points in a 128-by-128 grid
    - failed after inserting point 252 of 100000
    - student   size()    = 252
    - reference size()    = 251
    - student   isEmpty() = false
    - reference isEmpty() = false

  * 100000 random general points in a 1024-by-1024 grid
    - failed after inserting point 1233 of 100000
    - student   size()    = 1233
    - reference size()    = 1232
    - student   isEmpty() = false
    - reference isEmpty() = false

==> FAILED

Test 2a: insert points from file; check contains() with random query points
  * input0.txt
  * input1.txt
    - failed on trial 195 of 10000
    - query point          = (0.5, 0.96)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted:
      A  0.5 0.5

  * input5.txt
    - failed on trial 1 of 10000
    - query point          = (0.12, 0.6)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted:
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6

  * input10.txt
==> FAILED

Test 2b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
    - failed on trial 1 of 10000
    - query point          = (1.0, 0.0)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted:
      A  1.0 1.0

  * 5 random non-degenerate points in a 8-by-8 grid
    - failed on trial 8 of 10000
    - query point          = (0.625, 1.0)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted:
      A  0.625 0.75
      B  0.75 0.0
      C  0.0 0.125
      D  1.0 0.625
      E  0.25 0.5

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query point          = (0.8125, 0.75)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted:
      A  0.625 0.9375
      B  0.4375 0.75
      C  0.5625 0.4375
      D  0.125 0.875
      E  0.6875 0.6875
      F  1.0 0.3125
      G  0.0 0.0625
      H  0.0625 0.125
      I  0.1875 0.1875
      J  0.9375 0.5

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 9 of 10000
    - query point          = (0.84375, 0.03125)
    - student   contains() = false
    - reference contains() = true
    - sequence of points inserted:
      A  0.625 0.71875
      B  0.15625 0.78125
      C  0.4375 0.25
      D  0.8125 0.46875
      E  0.375 0.5
      F  0.46875 0.40625
      G  0.3125 0.53125
      H  0.34375 0.3125
      I  0.59375 0.375
      J  0.84375 0.03125
      K  0.0625 0.21875
      L  0.90625 0.28125
      M  0.03125 0.125
      N  0.9375 0.15625
      O  0.5625 1.0
      P  0.25 0.625
      Q  1.0 0.6875
      R  0.21875 0.875
      S  0.875 0.90625
      T  0.125 0.5625

  * 500 random non-degenerate points in a 1024-by-1024 grid
    - failed on trial 350 of 10000
    - query point          = (0.6845703125, 0.5849609375)
    - student   contains() = true
    - reference contains() = false

  * 10000 random non-degenerate points in a 65536-by-65536 grid
    - failed on trial 1176 of 10000
    - query point          = (0.44354248046875, 0.8427581787109375)
    - student   contains() = true
    - reference contains() = false

==> FAILED

Test 2c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
    - failed on trial 1 of 10000
    - query point          = (0.0, 1.0)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted:
      A  0.0 0.0

  * 10 random distinct points in a 4-by-4 grid
    - failed on trial 1 of 10000
    - query point          = (1.0, 1.0)
    - student   contains() = false
    - reference contains() = true
    - sequence of points inserted:
      A  0.75 0.5
      B  0.25 0.5
      C  1.0 1.0
      D  0.0 0.0
      E  0.75 0.25
      F  0.5 1.0
      G  0.5 0.0
      H  1.0 0.5
      I  0.0 1.0
      J  0.5 0.5

  * 20 random distinct points in a 8-by-8 grid
    - failed on trial 3 of 10000
    - query point          = (0.5, 0.875)
    - student   contains() = true
    - reference contains() = false
    - sequence of points inserted:
      A  0.625 1.0
      B  0.875 0.875
      C  0.875 0.375
      D  0.5 0.75
      E  0.125 0.375
      F  0.25 1.0
      G  0.0 0.5
      H  0.625 0.125
      I  0.375 0.875
      J  0.75 0.75
      K  0.875 1.0
      L  0.625 0.25
      M  0.625 0.375
      N  0.75 1.0
      O  0.125 0.875
      P  0.625 0.75
      Q  0.75 0.5
      R  0.25 0.75
      S  1.0 0.5
      T  0.75 0.625

  * 10000 random distinct points in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query point          = (0.5390625, 0.8984375)
    - student   contains() = false
    - reference contains() = true

  * 100000 random distinct points in a 1024-by-1024 grid
    - failed on trial 5 of 10000
    - query point          = (0.4814453125, 0.2099609375)
    - student   contains() = false
    - reference contains() = true

  * 100000 random distinct points in a 65536-by-65536 grid
==> FAILED

Test 2d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid
    - failed on trial 4 of 10000
    - query point          = (0.0, 0.0)
    - student   contains() = false
    - reference contains() = true

  * 10000 random general points in a 16-by-16 grid
    - failed on trial 2 of 10000
    - query point          = (0.1875, 0.8125)
    - student   contains() = false
    - reference contains() = true

  * 10000 random general points in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query point          = (0.2734375, 0.3203125)
    - student   contains() = false
    - reference contains() = true

  * 10000 random general points in a 1024-by-1024 grid
    - failed on trial 26 of 10000
    - query point          = (0.3681640625, 0.333984375)
    - student   contains() = false
    - reference contains() = true

==> FAILED

Test 3a: insert points from file; check range() with random query rectangles
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 3b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
==> passed

Test 3c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
  * 10 random distinct points and random rectangles in a 4-by-4 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.25, 1.0] x [0.75, 1.0]
    - sequence of points inserted:
      A  0.25 0.0
      B  1.0 0.25
      C  0.75 0.0
      D  0.75 1.0
      E  0.0 0.0
      F  0.0 0.5
      G  1.0 0.0
      H  0.75 0.5
      I  0.5 0.25
      J  0.5 1.0
    - student   range():  J
    - reference range():  D J

  * 20 random distinct points and random rectangles in a 8-by-8 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.25, 0.875] x [0.0, 0.375]
    - sequence of points inserted:
      A  0.5 0.5
      B  0.125 0.5
      C  0.375 0.0
      D  0.875 0.25
      E  0.125 0.0
      F  0.25 0.125
      G  1.0 0.375
      H  0.875 0.5
      I  0.375 0.5
      J  1.0 0.75
      K  0.125 0.25
      L  0.5 0.25
      M  0.625 1.0
      N  1.0 0.5
      O  0.625 0.125
      P  0.625 0.75
      Q  0.625 0.5
      R  0.375 0.875
      S  0.875 0.75
      T  0.25 0.25
    - student   range():  L C T D O
    - reference range():  C F T D O L

  * 100 random distinct points and random rectangles in a 16-by-16 grid
  * 1000 random distinct points and random rectangles in a 64-by-64 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.234375, 0.390625] x [0.34375, 0.9375]
    - student   range():  Q Z H U Q D G J L T A J E O B I C T P L W P B J A Y ...
    - reference range():  Q H R U J D Q L P Q Z G T H T Y W G A C J N Z C J N ...

  * 10000 random distinct points and random rectangles in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0390625, 0.390625] x [0.421875, 1.0]
    - student   range():  E W A M S Z H L G I N S U U L X Z Z S Y W B K L S K ...
    - reference range():  C M Y Q B C Z S H E S D R Q O H S U U I V Q L L Z D ...

==> FAILED

Test 3d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0, 0.0] x [0.0, 0.0]
    - student   range():  empty
    - reference range():  U

  * 5000 random general points and random rectangles in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.4375, 0.9375] x [0.4375, 0.6875]
    - student   range():  H T Y M F S Z D E K E O
    - reference range():  T Y M K C S T W C L F U Z L Q R O T C E D K L E U R ...

  * 5000 random general points and random rectangles in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.5390625, 0.8984375] x [0.078125, 0.203125]
    - student   range():  F E H I B V Q V M I E L K R P H F R G I E D W I O C ...
    - reference range():  G B B D F H W Q T G V T Q N C G N L Q I I Y R E I U ...

  * 5000 random general points and random rectangles in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.4052734375, 0.953125] x [0.193359375, 0.9931640625]
    - student   range():  V D X O S O B K R Q N C L K L Y A L D K W Y E R Z Z ...
    - reference range():  D E F O L O B K R Q N C L K L Y A L D K W J E R Z Z ...

==> FAILED

Test 3e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid
    - failed on trial 0 of 5
    - query rectangle = [0.0, 0.25] x [0.25, 0.75]
    - sequence of points inserted:
      A  0.0 0.5
      B  0.0 0.0
      C  1.0 0.5
      D  0.0 0.0
      E  0.0 1.0
    - student   range():  empty
    - reference range():  A

  * 10 tiny rectangles and 10 general points in a 4-by-4 grid
    - failed on trial 0 of 10
    - query rectangle = [0.0, 0.125] x [0.125, 0.375]
    - sequence of points inserted:
      A  0.0 0.25
      B  0.75 0.0
      C  0.5 1.0
      D  0.5 0.5
      E  0.75 0.5
      F  1.0 0.0
      G  0.0 0.75
      H  1.0 0.75
      I  0.0 0.75
      J  1.0 0.0
    - student   range():  empty
    - reference range():  A

  * 20 tiny rectangles and 20 general points in a 8-by-8 grid
    - failed on trial 0 of 20
    - query rectangle = [0.0625, 0.1875] x [0.5625, 0.6875]
    - sequence of points inserted:
      A  0.125 0.625
      B  0.125 0.75
      C  0.875 0.125
      D  0.0 0.625
      E  0.0 0.375
      F  0.125 0.5
      G  0.0 0.625
      H  0.375 0.625
      I  0.5 0.125
      J  0.0 0.5
      K  0.375 0.5
      L  0.75 1.0
      M  0.125 1.0
      N  0.5 0.0
      O  0.0 1.0
      P  0.875 0.25
      Q  0.25 0.0
      R  0.625 0.125
      S  0.875 1.0
      T  0.5 0.125
    - student   range():  empty
    - reference range():  A

  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid
    - failed on trial 0 of 5000
    - query rectangle = [0.87890625, 0.88671875] x [0.42578125, 0.43359375]
    - student   range():  empty
    - reference range():  A

  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
    - failed on trial 0 of 5000
    - query rectangle = [0.66162109375, 0.66259765625] x [0.94677734375, 0.94775390625]
    - student   range():  empty
    - reference range():  A

  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
    - failed on trial 0 of 5000
    - query rectangle = [0.32950592041015625, 0.32952117919921875] x [0.8036575317382812, 0.8036727905273438]
    - student   range():  empty
    - reference range():  A

==> FAILED

Test 4a: insert points from file; check range() with random query rectangles
         and check traversal of kd-tree
  * input5.txt
  * input10.txt
==> passed

Test 4b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of kd-tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
==> passed

Test 5a: insert points from file; check nearest() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
    - failed on trial 3 of 10000
    - sequence of points inserted:
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - query point                   = (0.131, 0.805)
    - student   nearest()           = (0.9, 0.6)
    - reference nearest()           = (0.4, 0.7)
    - student   distanceSquaredTo() = 0.633386
    - reference distanceSquaredTo() = 0.083386

  * input10.txt
    - failed on trial 4 of 10000
    - sequence of points inserted:
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - query point                   = (0.926, 0.439)
    - student   nearest()           = (0.564, 0.413)
    - reference nearest()           = (0.785, 0.725)
    - student   distanceSquaredTo() = 0.13172
    - reference distanceSquaredTo() = 0.101677

==> FAILED

Test 5b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid
    - failed on trial 3 of 10000
    - sequence of points inserted:
      A  0.0 0.125
      B  0.5 0.5
      C  0.625 0.0
      D  0.125 0.875
      E  1.0 0.75
    - query point                   = (0.875, 0.625)
    - student   nearest()           = (0.5, 0.5)
    - reference nearest()           = (1.0, 0.75)
    - student   distanceSquaredTo() = 0.15625
    - reference distanceSquaredTo() = 0.03125

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - sequence of points inserted:
      A  0.875 0.9375
      B  1.0 0.5
      C  0.8125 0.125
      D  0.25 0.0625
      E  0.0625 0.6875
      F  0.625 0.625
      G  0.0 0.0
      H  0.5625 0.25
      I  0.3125 0.3125
      J  0.75 0.375
    - query point                   = (0.4375, 0.875)
    - student   nearest()           = (0.875, 0.9375)
    - reference nearest()           = (0.625, 0.625)
    - student   distanceSquaredTo() = 0.1953125
    - reference distanceSquaredTo() = 0.09765625

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - sequence of points inserted:
      A  0.53125 0.4375
      B  0.71875 0.71875
      C  0.34375 0.0
      D  0.375 0.03125
      E  0.3125 0.25
      F  0.03125 0.96875
      G  0.15625 0.15625
      H  1.0 0.375
      I  0.65625 0.5625
      J  0.125 0.3125
      K  0.5 0.34375
      L  0.96875 0.09375
      M  0.1875 0.75
      N  0.875 0.28125
      O  0.78125 0.40625
      P  0.75 0.1875
      Q  0.59375 1.0
      R  0.4375 0.21875
      S  0.21875 0.9375
      T  0.9375 0.90625
    - query point                   = (0.09375, 0.6875)
    - student   nearest()           = (0.53125, 0.4375)
    - reference nearest()           = (0.1875, 0.75)
    - student   distanceSquaredTo() = 0.25390625
    - reference distanceSquaredTo() = 0.0126953125

  * 30 random non-degenerate points in a 64-by-64 grid
    - failed on trial 1 of 10000
    - query point                   = (0.71875, 0.796875)
    - student   nearest()           = (0.5, 0.84375)
    - reference nearest()           = (0.59375, 0.65625)
    - student   distanceSquaredTo() = 0.050048828125
    - reference distanceSquaredTo() = 0.035400390625

  * 10000 random non-degenerate points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point                   = (0.90093994140625, 0.0739593505859375)
    - student   nearest()           = (0.839874267578125, 0.012969970703125)
    - reference nearest()           = (0.896148681640625, 0.0612945556640625)
    - student   distanceSquaredTo() = 0.007448720978573
    - reference distanceSquaredTo() = 0.000183353200555

==> FAILED

Test 5c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
    - failed on trial 1 of 10000
    - sequence of points inserted:
      A  1.0 0.75
      B  0.0 0.0
      C  0.25 1.0
      D  1.0 1.0
      E  0.0 0.75
      F  0.25 0.25
      G  0.0 0.25
      H  1.0 0.5
      I  0.75 0.25
      J  1.0 0.25
    - query point                   = (0.5, 0.75)
    - student   nearest()           = (1.0, 0.25)
    - reference nearest()           = (0.25, 1.0)
    - student   distanceSquaredTo() = 0.5
    - reference distanceSquaredTo() = 0.125

  * 15 random distinct points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - sequence of points inserted:
      A  1.0 0.5
      B  0.125 0.375
      C  0.75 0.75
      D  0.375 0.25
      E  0.75 0.625
      F  1.0 0.25
      G  0.625 0.75
      H  0.25 0.75
      I  1.0 0.0
      J  1.0 0.75
      K  1.0 0.375
      L  0.0 1.0
      M  0.125 0.125
      N  0.5 1.0
      O  0.5 0.0
    - query point                   = (0.625, 1.0)
    - student   nearest()           = (1.0, 0.375)
    - reference nearest()           = (0.5, 1.0)
    - student   distanceSquaredTo() = 0.53125
    - reference distanceSquaredTo() = 0.015625

  * 20 random distinct points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - sequence of points inserted:
      A  1.0 0.25
      B  0.8125 0.9375
      C  0.4375 0.5
      D  0.6875 0.3125
      E  0.75 0.0625
      F  0.75 1.0
      G  0.125 0.5625
      H  0.125 0.8125
      I  0.8125 0.75
      J  0.125 0.4375
      K  0.625 0.25
      L  0.5 0.25
      M  0.375 0.5625
      N  0.6875 1.0
      O  0.6875 0.875
      P  0.0 0.5625
      Q  0.25 0.6875
      R  1.0 0.4375
      S  0.1875 0.1875
      T  0.375 0.6875
    - query point                   = (0.5, 0.0)
    - student   nearest()           = (1.0, 0.4375)
    - reference nearest()           = (0.5, 0.25)
    - student   distanceSquaredTo() = 0.44140625
    - reference distanceSquaredTo() = 0.0625

  * 100 random distinct points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - query point                   = (0.28125, 0.75)
    - student   nearest()           = (0.34375, 0.96875)
    - reference nearest()           = (0.25, 0.75)
    - student   distanceSquaredTo() = 0.0517578125
    - reference distanceSquaredTo() = 0.0009765625

  * 10000 random distinct points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point                   = (0.9573974609375, 0.9749298095703125)
    - student   nearest()           = (0.94427490234375, 0.9976348876953125)
    - reference nearest()           = (0.951873779296875, 0.9805450439453125)
    - student   distanceSquaredTo() = 0.000687722116709
    - reference distanceSquaredTo() = 0.000062041915953

==> FAILED

Test 5d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query point                   = (0.375, 0.125)
    - student   nearest()           = (0.5, 0.125)
    - reference nearest()           = (0.375, 0.125)
    - student   distanceSquaredTo() = 0.015625
    - reference distanceSquaredTo() = 0

  * 10000 random general points in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query point                   = (0.40625, 0.9921875)
    - student   nearest()           = (0.0390625, 0.9453125)
    - reference nearest()           = (0.40625, 0.9921875)
    - student   distanceSquaredTo() = 0.13702392578125
    - reference distanceSquaredTo() = 0

  * 10000 random general points in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query point                   = (0.4951171875, 0.033203125)
    - student   nearest()           = (0.4453125, 0.2109375)
    - reference nearest()           = (0.494140625, 0.0361328125)
    - student   distanceSquaredTo() = 0.034070014953613
    - reference distanceSquaredTo() = 0.000009536743164

==> FAILED

Test 6a: insert points from file; check nearest() with random query points
         and check traversal of kd-tree
  * input5.txt
    - student   nearest() = (0.5, 0.4)
    - reference nearest() = (0.5, 0.4)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.66, 0.41)
    - sequence of points inserted:
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C D E
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B D C E
    - failed on trial 1 of 1000

  * input10.txt
    - student   nearest() = (0.564, 0.413)
    - reference nearest() = (0.785, 0.725)
    - student   distanceSquaredTo() = 0.042365
    - reference distanceSquaredTo() = 0.03385
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.65, 0.6)
    - sequence of points inserted:
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A C B G H
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B H I
    - failed on trial 1 of 1000

==> FAILED

Test 6b: insert non-degenerate points; check nearest() with random query points
         and check traversal of kd-tree
  * 5 random non-degenerate points in a 8-by-8 grid
    - student   nearest() = (0.0, 1.0)
    - reference nearest() = (0.0, 1.0)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.125, 0.875)
    - sequence of points inserted:
      A  0.25 0.5
      B  1.0 0.25
      C  0.75 0.0
      D  0.0 1.0
      E  0.375 0.75
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A D B
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A D B E
    - failed on trial 1 of 1000

  * 10 random non-degenerate points in a 16-by-16 grid
    - student   nearest() = (0.6875, 0.1875)
    - reference nearest() = (0.6875, 0.1875)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.75, 0.25)
    - sequence of points inserted:
      A  0.375 0.5625
      B  0.0625 0.5
      C  0.6875 0.1875
      D  0.8125 0.0625
      E  0.25 0.375
      F  0.625 1.0
      G  0.3125 0.6875
      H  0.875 0.8125
      I  0.5625 0.125
      J  0.1875 0.75
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C D F
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A C F H D I
    - failed on trial 1 of 1000

  * 20 random non-degenerate points in a 32-by-32 grid
    - student   nearest() = (0.4375, 0.5625)
    - reference nearest() = (0.3125, 0.84375)
    - student   distanceSquaredTo() = 0.1220703125
    - reference distanceSquaredTo() = 0.0078125
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.375, 0.90625)
    - sequence of points inserted:
      A  0.4375 0.5625
      B  0.03125 0.65625
      C  0.78125 0.09375
      D  0.8125 0.1875
      E  0.625 0.0625
      F  0.21875 0.03125
      G  0.6875 0.125
      H  0.25 0.25
      I  0.875 0.4375
      J  0.53125 0.53125
      K  0.65625 0.75
      L  0.15625 0.21875
      M  0.84375 0.6875
      N  0.09375 0.78125
      O  0.59375 0.46875
      P  1.0 0.9375
      Q  0.1875 0.8125
      R  0.46875 0.59375
      S  0.3125 0.84375
      T  0.5 0.28125
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B N Q S C D G J R
    - failed on trial 1 of 1000

  * 30 random non-degenerate points in a 64-by-64 grid
    - student   nearest() = (0.875, 0.65625)
    - reference nearest() = (0.875, 0.65625)
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 7
    - number of reference entries = 6
    - entry 1 of the two sequences are not equal
    - student   entry 1 = (0.703125, 0.0)
    - reference entry 1 = (0.796875, 0.640625)

    - failed on trial 1 of 1000

  * 50 random non-degenerate points in a 128-by-128 grid
    - student   nearest() = (0.6796875, 0.15625)
    - reference nearest() = (0.640625, 0.1875)
    - student   distanceSquaredTo() = 0.01129150390625
    - reference distanceSquaredTo() = 0.0098876953125
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 5
    - number of reference entries = 12
    - entry 2 of the two sequences are not equal
    - student   entry 2 = (0.5078125, 0.0390625)
    - reference entry 2 = (0.5234375, 0.4765625)

    - failed on trial 1 of 1000

  * 1000 random non-degenerate points in a 2048-by-2048 grid
    - student   nearest() = (0.3779296875, 0.06787109375)
    - reference nearest() = (0.5009765625, 0.0712890625)
    - student   distanceSquaredTo() = 0.013074159622192
    - reference distanceSquaredTo() = 0.000078201293945
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 3
    - number of reference entries = 16
    - entry 1 of the two sequences are not equal
    - student   entry 1 = (0.04833984375, 0.708984375)
    - reference entry 1 = (0.94775390625, 0.70654296875)

    - failed on trial 1 of 1000

==> FAILED

Test 7: check with no points
  * size() and isEmpty()
  * contains()
  * nearest()
  * range()
==> passed

Test 8: check that the specified exception is thrown with null arguments
  * argument to insert() is null
  * argument to contains() is null
  * argument to range() is null
  * argument to nearest() is null
==> passed

Test 9a: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 15 of 20000
    - student   nearest()  = (1.0, 0.8125)
    - reference nearest()  = (0.6875, 0.3125)
    - student   distanceSquaredTo() = 0.8125
    - reference distanceSquaredTo() = 0.09765625
    - sequence of operations was:
           st.insert(0.875, 0.9375)
           st.insert(0.6875, 0.3125)
           st.contains((0.4375, 0.4375))  ==>  false
           st.nearest((0.8125, 0.5625))   ==>  (0.6875, 0.3125)
           st.insert(0.3125, 1.0)
           st.nearest((0.9375, 0.1875))   ==>  (0.6875, 0.3125)
           st.insert(0.1875, 0.625)
           st.isEmpty()  ==>  false
           st.contains((0.25, 0.0625))  ==>  false
           st.size()  ==>  4
           st.range([0.9375, 1.0] x [0.125, 0.8125])  ==>  empty
           st.insert(1.0, 0.8125)
           st.isEmpty()  ==>  false
           st.size()  ==>  5
           st.nearest((0.5, 0.0625))   ==>  (1.0, 0.8125)

  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 17 of 20000
    - student   nearest()  = (0.625, 0.7578125)
    - reference nearest()  = (0.765625, 0.859375)
    - student   distanceSquaredTo() = 0.03082275390625
    - reference distanceSquaredTo() = 0.0274658203125
    - sequence of operations was:
           st.size()  ==>  0
           st.insert(0.625, 0.7578125)
           st.contains((0.7421875, 0.8125))  ==>  false
           st.nearest((0.3828125, 0.234375))   ==>  (0.625, 0.7578125)
           st.insert(0.375, 0.6640625)
           st.range([0.0703125, 0.3125] x [0.03125, 0.4296875])  ==>  empty
           st.nearest((0.0078125, 0.7265625))   ==>  (0.375, 0.6640625)
           st.nearest((0.1484375, 0.2421875))   ==>  (0.375, 0.6640625)
           st.nearest((0.203125, 0.15625))   ==>  (0.375, 0.6640625)
           st.range([0.265625, 0.3046875] x [0.34375, 0.609375])  ==>  empty
           st.isEmpty()  ==>  false
           st.insert(0.296875, 0.9140625)
           st.contains((0.8125, 0.75))  ==>  false
           st.insert(0.953125, 0.828125)
           st.range([0.3046875, 0.6484375] x [0.0078125, 0.53125])  ==>  empty
           st.insert(0.765625, 0.859375)
           st.nearest((0.7890625, 0.6953125))   ==>  (0.625, 0.7578125)

  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 16 of 20000
    - student   nearest()  = (0.443359375, 0.892578125)
    - reference nearest()  = (0.654296875, 0.8583984375)
    - student   distanceSquaredTo() = 0.024247169494629
    - reference distanceSquaredTo() = 0.005205154418945
    - sequence of operations was:
           st.insert(0.443359375, 0.892578125)
           st.insert(0.3662109375, 0.8876953125)
           st.isEmpty()  ==>  false
           st.contains((0.5234375, 0.34765625))  ==>  false
           st.insert(0.7216796875, 0.6171875)
           st.range([0.1318359375, 0.2548828125] x [0.3359375, 0.8359375])  ==>  empty
           st.range([0.4638671875, 0.9306640625] x [0.2314453125, 0.9287109375])  ==>  B
           st.nearest((0.578125, 0.7578125))   ==>  (0.443359375, 0.892578125)
           st.nearest((0.3505859375, 0.70703125))   ==>  (0.3662109375, 0.8876953125)
           st.nearest((0.5625, 0.197265625))   ==>  (0.7216796875, 0.6171875)
           st.insert(0.654296875, 0.8583984375)
           st.insert(0.048828125, 0.3720703125)
           st.range([0.064453125, 0.2470703125] x [0.0087890625, 0.021484375])  ==>  empty
           st.contains((0.9580078125, 0.2333984375))  ==>  false
           st.insert(0.033203125, 0.60546875)
           st.nearest((0.5986328125, 0.904296875))   ==>  (0.443359375, 0.892578125)

  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 19 of 20000
    - student   nearest()  = (0.8333740234375, 0.6500244140625)
    - reference nearest()  = (0.3873291015625, 0.3311767578125)
    - student   distanceSquaredTo() = 0.207985162734985
    - reference distanceSquaredTo() = 0.092158854007721
    - sequence of operations was:
           st.insert(0.6661376953125, 0.7940673828125)
           st.contains((0.783935546875, 0.0107421875))  ==>  false
           st.insert(0.3165283203125, 0.700927734375)
           st.insert(0.8333740234375, 0.6500244140625)
           st.contains((0.67431640625, 0.374267578125))  ==>  false
           st.range([0.0479736328125, 0.523193359375] x [0.27392578125, 0.960205078125])  ==>  C
           st.insert(0.363037109375, 0.9127197265625)
           st.range([0.2177734375, 0.3480224609375] x [0.0247802734375, 0.50830078125])  ==>  empty
           st.contains((0.744140625, 0.7103271484375))  ==>  false
           st.insert(0.3873291015625, 0.3311767578125)
           st.insert(0.154541015625, 0.2021484375)
           st.insert(0.208740234375, 0.3699951171875)
           st.contains((0.6090087890625, 0.79638671875))  ==>  false
           st.nearest((0.123291015625, 0.3792724609375))   ==>  (0.208740234375, 0.3699951171875)
           st.range([0.0579833984375, 0.2203369140625] x [0.2210693359375, 0.2529296875])  ==>  empty
           st.range([0.1673583984375, 0.2205810546875] x [0.24755859375, 0.4710693359375])  ==>  J
           st.range([0.188232421875, 0.2255859375] x [0.0731201171875, 0.2996826171875])  ==>  empty
           st.contains((0.60888671875, 0.1722412109375))  ==>  false
           st.nearest((0.6712646484375, 0.2237548828125))   ==>  (0.8333740234375, 0.6500244140625)

  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 37 of 20000
    - student   nearest()  = (0.0843658447265625, 0.7674102783203125)
    - reference nearest()  = (0.2110443115234375, 0.99322509765625)
    - student   distanceSquaredTo() = 0.120414720149711
    - reference distanceSquaredTo() = 0.0546163180843

==> FAILED

Test 9b: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 10 of 20000
    - student   contains() = true
    - reference contains() = false
    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.insert(1.0, 1.0)
           st.insert(0.0, 0.0)
           st.insert(0.0, 1.0)
           st.isEmpty()  ==>  false
           st.size()  ==>  3
           st.size()  ==>  3
           st.size()  ==>  3
           st.nearest((1.0, 0.0))   ==>  (0.0, 0.0)
           st.contains((1.0, 0.0))  ==>  true

  * 20000 calls with distinct points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 15 of 20000
    - student   contains() = true
    - reference contains() = false
    - sequence of operations was:
           st.insert(1.0, 0.3125)
           st.nearest((0.75, 0.5))   ==>  (1.0, 0.3125)
           st.range([0.0, 0.875] x [0.6875, 0.9375])  ==>  empty
           st.range([0.5625, 0.9375] x [0.0625, 0.8125])  ==>  empty
           st.size()  ==>  1
           st.contains((0.75, 0.6875))  ==>  false
           st.nearest((0.1875, 0.5))   ==>  (1.0, 0.3125)
           st.insert(0.1875, 0.25)
           st.contains((0.4375, 0.4375))  ==>  false
           st.nearest((0.5625, 0.5))   ==>  (0.1875, 0.25)
           st.nearest((0.625, 1.0))   ==>  (1.0, 0.3125)
           st.insert(0.5625, 0.5)
           st.contains((0.0, 0.375))  ==>  false
           st.insert(0.5625, 0.125)
           st.contains((1.0, 1.0))  ==>  true

  * 20000 calls with distinct points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 23 of 20000
    - student   nearest()  = (0.1640625, 0.6015625)
    - reference nearest()  = (0.375, 0.3984375)
    - student   distanceSquaredTo() = 0.3507080078125
    - reference distanceSquaredTo() = 0.22418212890625
    - sequence of operations was:
           st.insert(0.1015625, 0.2734375)
           st.insert(0.1640625, 0.6015625)
           st.contains((0.8515625, 0.3359375))  ==>  false
           st.isEmpty()  ==>  false
           st.nearest((0.609375, 0.359375))   ==>  (0.1640625, 0.6015625)
           st.nearest((0.34375, 0.8671875))   ==>  (0.1640625, 0.6015625)
           st.contains((0.234375, 0.65625))  ==>  false
           st.isEmpty()  ==>  false
           st.contains((0.8515625, 0.859375))  ==>  false
           st.insert(0.171875, 0.9765625)
           st.size()  ==>  3
           st.insert(0.0546875, 0.765625)
           st.range([0.171875, 0.7890625] x [0.1640625, 0.6328125])  ==>  empty
           st.isEmpty()  ==>  false
           st.insert(0.0546875, 0.5546875)
           st.nearest((0.3125, 0.28125))   ==>  (0.1015625, 0.2734375)
           st.insert(0.6328125, 0.078125)
           st.isEmpty()  ==>  false
           st.insert(0.3125, 0.90625)
           st.nearest((0.0859375, 0.6328125))   ==>  (0.1640625, 0.6015625)
           st.contains((0.9375, 0.8828125))  ==>  false
           st.insert(0.375, 0.3984375)
           st.nearest((0.75, 0.6875))   ==>  (0.1640625, 0.6015625)

  * 20000 calls with distinct points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 19 of 20000
    - student   nearest()  = (0.9599609375, 0.5400390625)
    - reference nearest()  = (0.4677734375, 0.986328125)
    - student   distanceSquaredTo() = 0.823208808898926
    - reference distanceSquaredTo() = 0.130304336547852
    - sequence of operations was:
           st.insert(0.931640625, 0.033203125)
           st.nearest((0.544921875, 0.427734375))   ==>  (0.931640625, 0.033203125)
           st.insert(0.55859375, 0.5439453125)
           st.nearest((0.759765625, 0.1875))   ==>  (0.931640625, 0.033203125)
           st.contains((0.7626953125, 0.615234375))  ==>  false
           st.insert(0.5419921875, 0.642578125)
           st.isEmpty()  ==>  false
           st.contains((0.8017578125, 0.2470703125))  ==>  false
           st.insert(0.505859375, 0.5205078125)
           st.insert(0.4462890625, 0.4033203125)
           st.range([0.234375, 0.2578125] x [0.072265625, 0.732421875])  ==>  empty
           st.insert(0.4638671875, 0.26171875)
           st.range([0.4326171875, 0.4775390625] x [0.2880859375, 0.673828125])  ==>  X
           st.nearest((0.18359375, 0.1630859375))   ==>  (0.4638671875, 0.26171875)
           st.contains((0.55078125, 0.775390625))  ==>  false
           st.insert(0.0634765625, 0.4189453125)
           st.insert(0.9599609375, 0.5400390625)
           st.insert(0.4677734375, 0.986328125)
           st.nearest((0.12109375, 0.8857421875))   ==>  (0.9599609375, 0.5400390625)

  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 18 of 20000
    - student   nearest()  = (0.6512451171875, 0.3992919921875)
    - reference nearest()  = (0.9482421875, 0.6273193359375)
    - student   distanceSquaredTo() = 0.114071279764175
    - reference distanceSquaredTo() = 0.04586024582386
    - sequence of operations was:
           st.size()  ==>  0
           st.insert(0.6512451171875, 0.3992919921875)
           st.range([0.212890625, 0.4429931640625] x [0.192626953125, 0.3587646484375])  ==>  empty
           st.nearest((0.3232421875, 0.9442138671875))   ==>  (0.6512451171875, 0.3992919921875)
           st.nearest((0.8529052734375, 0.3359375))   ==>  (0.6512451171875, 0.3992919921875)
           st.range([0.0123291015625, 0.3919677734375] x [0.260498046875, 0.6885986328125])  ==>  empty
           st.insert(0.6739501953125, 0.92138671875)
           st.insert(0.9482421875, 0.6273193359375)
           st.insert(0.81591796875, 0.7982177734375)
           st.contains((0.2730712890625, 0.9244384765625))  ==>  false
           st.size()  ==>  4
           st.contains((6.103515625E-4, 0.0233154296875))  ==>  false
           st.nearest((0.3292236328125, 0.2711181640625))   ==>  (0.6512451171875, 0.3992919921875)
           st.contains((0.0069580078125, 0.1907958984375))  ==>  false
           st.contains((0.6021728515625, 0.1259765625))  ==>  false
           st.insert(0.8394775390625, 0.87353515625)
           st.contains((0.5594482421875, 0.5478515625))  ==>  false
           st.nearest((0.988525390625, 0.4169921875))   ==>  (0.6512451171875, 0.3992919921875)

  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 32 of 20000
    - student   nearest()  = (0.274749755859375, 0.69171142578125)
    - reference nearest()  = (0.0736236572265625, 0.8552703857421875)
    - student   distanceSquaredTo() = 0.10311040468514
    - reference distanceSquaredTo() = 0.004178977105767

==> FAILED

Test 9c: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 5 of 20000
    - student   contains() = true
    - reference contains() = false
    - sequence of operations was:
           st.insert(0.0, 0.0)
           st.isEmpty()  ==>  false
           st.insert(1.0, 0.0)
           st.insert(1.0, 0.0)
           st.contains((0.0, 1.0))  ==>  true

  * 20000 calls with general points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 4 of 20000
    - student   contains() = true
    - reference contains() = false
    - sequence of operations was:
           st.insert(0.0625, 0.625)
           st.nearest((1.0, 0.6875))   ==>  (0.0625, 0.625)
           st.range([0.25, 0.625] x [0.0, 0.75])  ==>  empty
           st.contains((0.0625, 0.8125))  ==>  true

  * 20000 calls with general points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 31 of 20000
    - student   nearest()  = (0.0, 0.3046875)
    - reference nearest()  = (0.6328125, 0.7421875)
    - student   distanceSquaredTo() = 0.559814453125
    - reference distanceSquaredTo() = 0.12261962890625

  * 20000 calls with general points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 34 of 20000
    - student   nearest()  = (0.072265625, 0.39453125)
    - reference nearest()  = (0.2177734375, 0.056640625)
    - student   distanceSquaredTo() = 0.073703765869141
    - reference distanceSquaredTo() = 0.025582313537598

  * 20000 calls with general points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 20 of 20000
    - student   nearest()  = (0.652099609375, 0.4100341796875)
    - reference nearest()  = (0.7413330078125, 0.2125244140625)
    - student   distanceSquaredTo() = 0.058619022369385
    - reference distanceSquaredTo() = 0.012642934918404
    - sequence of operations was:
           st.size()  ==>  0
           st.insert(0.652099609375, 0.4100341796875)
           st.contains((0.4306640625, 0.906494140625))  ==>  false
           st.contains((0.8876953125, 0.788818359375))  ==>  false
           st.range([0.1346435546875, 0.8741455078125] x [0.13037109375, 0.877197265625])  ==>  B
           st.insert(0.8543701171875, 0.935791015625)
           st.contains((0.8250732421875, 0.7503662109375))  ==>  false
           st.nearest((0.4224853515625, 0.6253662109375))   ==>  (0.652099609375, 0.4100341796875)
           st.insert(0.7413330078125, 0.2125244140625)
           st.insert(0.7900390625, 0.690185546875)
           st.nearest((0.8311767578125, 0.447509765625))   ==>  (0.652099609375, 0.4100341796875)
           st.insert(0.2110595703125, 0.6402587890625)
           st.nearest((0.44384765625, 0.4434814453125))   ==>  (0.652099609375, 0.4100341796875)
           st.insert(0.090576171875, 0.9478759765625)
           st.contains((0.380859375, 0.671875))  ==>  false
           st.nearest((0.0797119140625, 0.4544677734375))   ==>  (0.2110595703125, 0.6402587890625)
           st.range([0.3939208984375, 0.72705078125] x [0.096923828125, 0.65673828125])  ==>  B
           st.contains((0.1943359375, 0.4356689453125))  ==>  false
           st.contains((0.262451171875, 0.331298828125))  ==>  false
           st.nearest((0.637939453125, 0.1683349609375))   ==>  (0.652099609375, 0.4100341796875)

  * 20000 calls with general points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 28 of 20000
    - student   nearest()  = (0.7266845703125, 0.19073486328125)
    - reference nearest()  = (0.8273162841796875, 0.3782196044921875)
    - student   distanceSquaredTo() = 0.017345596570522
    - reference distanceSquaredTo() = 0.007518101483583

==> FAILED

Test 10: insert n random points into two different KdTree objects;
        check that repeated calls to size(), contains(), range(),
        and nearest() with the same arguments yield same results
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 100 random general points in a 128-by-128 grid
  * 1000 random general points in a 65536-by-65536 grid
==> passed


Total: 10/27 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes

================================================================



Analyzing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes

================================================================



Analyzing memory of PointSET
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a PointSET with n points (including Point2D and RectHV objects).
Maximum allowed memory is 96n + 200 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          240                264
=> passed        2          336                360
=> passed        5          624                648
=> passed       10         1104               1128
=> passed       25         2544               2568
=> passed      100         9744               9768
=> passed      400        38544              38568
=> passed      800        76944              76968
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 96.00 n + 144.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)

================================================================



Analyzing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with n points (including Point2D and RectHV objects).
Maximum allowed memory is 312n + 192 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          136                160
=> passed        2          224                288
=> passed        5          488                672
=> passed       10          928               1312
=> passed       25         2248               3232
=> passed      100         8848              12832
=> passed      400        35248              51232
=> passed      800        70448             102432
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 88.00 n + 48.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 14 total tests.




...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.
