See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     FAILED (1 warning)
PMD:          PASSED
Checkstyle:   PASSED

Correctness:  22/35 tests passed
Memory:       16/16 tests passed
Timing:       34/42 tests passed

Aggregate score: 73.90%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
5.0K Apr 17 14:11 KdTree.java
2.3K Apr 17 14:11 PointSET.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At KdTree.java:[line 48]
Warnings generated: 1


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: insert n random points; check size() and isEmpty() after each insertion
        (size may be less than n because of duplicates)
  * 5 random points in a 1-by-1 grid
  * 50 random points in a 8-by-8 grid
  * 100 random points in a 16-by-16 grid
  * 1000 random points in a 128-by-128 grid
  * 5000 random points in a 1024-by-1024 grid
  * 50000 random points in a 65536-by-65536 grid
==> passed

Test 2: insert n random points; check contains() with random query points
  * 1 random points in a 1-by-1 grid
  * 10 random points in a 4-by-4 grid
  * 20 random points in a 8-by-8 grid
  * 10000 random points in a 128-by-128 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 65536-by-65536 grid
==> passed

Test 3: insert random points; check nearest() with random query points
  * 10 random points in a 4-by-4 grid
  * 15 random points in a 8-by-8 grid
  * 20 random points in a 16-by-16 grid
  * 100 random points in a 32-by-32 grid
  * 10000 random points in a 65536-by-65536 grid
==> passed

Test 4: insert random points; check range() with random query rectangles
  * 2 random points and random rectangles in a 2-by-2 grid
  * 10 random points and random rectangles in a 4-by-4 grid
  * 20 random points and random rectangles in a 8-by-8 grid
  * 100 random points and random rectangles in a 16-by-16 grid
  * 1000 random points and random rectangles in a 64-by-64 grid
  * 10000 random points and random rectangles in a 128-by-128 grid
==> passed

Test 5: call methods before inserting any points
 * size() and isEmpty()
 * contains()
 * nearest()
 * range()
==> passed

Test 6: call methods with null argument
  * insert()
  * contains()
  * range()
  * nearest()
==> passed

Test 7: check intermixed sequence of calls to insert(), isEmpty(),
        size(), contains(), range(), and nearest() with
        probabilities (p1, p2, p3, p4, p5, p6, p7), respectively
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 16-by-16 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 128-by-128 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 65536-by-65536 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
==> passed

Test 8: check that two PointSET objects can be created at the same time
==> passed


Total: 8/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
Running 27 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 50000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
  * 10 random general points in a 4-by-4 grid
  * 50 random general points in a 8-by-8 grid
  * 100000 random general points in a 16-by-16 grid
  * 100000 random general points in a 128-by-128 grid
  * 100000 random general points in a 1024-by-1024 grid
==> passed

Test 2a: insert points from file; check contains() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
    - failed on trial 3130 of 10000
    - query point          = (0.2, 0.3)
    - student   contains() = false
    - reference contains() = true
    - sequence of points inserted:
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6

  * input10.txt
==> FAILED

Test 2b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
    - failed on trial 28 of 10000
    - query point          = (0.5, 0.75)
    - student   contains() = false
    - reference contains() = true
    - sequence of points inserted:
      A  0.625 1.0
      B  0.5 0.75
      C  0.75 0.125
      D  1.0 0.0
      E  0.875 0.625

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 33 of 10000
    - query point          = (0.5, 0.9375)
    - student   contains() = false
    - reference contains() = true
    - sequence of points inserted:
      A  0.625 0.25
      B  0.0625 0.625
      C  0.4375 0.5625
      D  0.25 0.0
      E  1.0 0.375
      F  0.875 0.875
      G  0.75 0.125
      H  0.125 0.8125
      I  0.5625 1.0
      J  0.5 0.9375

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 80 of 10000
    - query point          = (0.78125, 0.1875)
    - student   contains() = false
    - reference contains() = true
    - sequence of points inserted:
      A  0.96875 0.59375
      B  0.375 0.625
      C  0.78125 0.1875
      D  0.09375 0.84375
      E  0.84375 0.75
      F  0.5625 0.8125
      G  0.125 0.03125
      H  0.8125 0.78125
      I  0.65625 0.90625
      J  0.1875 0.5
      K  0.40625 0.25
      L  0.0 0.9375
      M  0.0625 0.125
      N  0.625 0.34375
      O  0.03125 0.09375
      P  0.21875 0.875
      Q  0.28125 0.53125
      R  0.9375 0.96875
      S  1.0 0.71875
      T  0.15625 0.65625

  * 500 random non-degenerate points in a 1024-by-1024 grid
    - failed on trial 1393 of 10000
    - query point          = (0.2685546875, 0.4228515625)
    - student   contains() = false
    - reference contains() = true

  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> FAILED

Test 2c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
    - failed on trial 2 of 10000
    - query point          = (0.75, 0.75)
    - student   contains() = false
    - reference contains() = true
    - sequence of points inserted:
      A  1.0 0.75
      B  0.5 1.0
      C  0.5 0.5
      D  0.0 0.25
      E  1.0 0.5
      F  0.5 0.25
      G  0.0 1.0
      H  0.0 0.5
      I  0.25 0.0
      J  0.75 0.75

  * 20 random distinct points in a 8-by-8 grid
    - failed on trial 3 of 10000
    - query point          = (0.75, 0.5)
    - student   contains() = false
    - reference contains() = true
    - sequence of points inserted:
      A  0.375 0.125
      B  0.5 0.375
      C  1.0 0.75
      D  0.625 0.0
      E  0.0 0.25
      F  0.75 0.5
      G  0.5 0.625
      H  0.625 0.875
      I  0.5 0.75
      J  0.625 0.25
      K  0.25 0.375
      L  0.625 0.125
      M  0.125 0.875
      N  0.875 0.75
      O  0.25 1.0
      P  0.875 0.125
      Q  0.25 0.625
      R  0.375 0.875
      S  0.125 0.5
      T  0.25 0.75

  * 10000 random distinct points in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query point          = (0.6171875, 0.7109375)
    - student   contains() = false
    - reference contains() = true

  * 100000 random distinct points in a 1024-by-1024 grid
    - failed on trial 15 of 10000
    - query point          = (0.8173828125, 0.88671875)
    - student   contains() = false
    - reference contains() = true

  * 100000 random distinct points in a 65536-by-65536 grid
    - failed on trial 1074 of 10000
    - query point          = (0.221893310546875, 0.0352020263671875)
    - student   contains() = false
    - reference contains() = true

==> FAILED

Test 2d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid
    - failed on trial 1 of 10000
    - query point          = (1.0, 1.0)
    - student   contains() = false
    - reference contains() = true

  * 10000 random general points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query point          = (0.5625, 0.3125)
    - student   contains() = false
    - reference contains() = true

  * 10000 random general points in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query point          = (0.484375, 0.1015625)
    - student   contains() = false
    - reference contains() = true

  * 10000 random general points in a 1024-by-1024 grid
    - failed on trial 66 of 10000
    - query point          = (0.7919921875, 0.265625)
    - student   contains() = false
    - reference contains() = true

==> FAILED

Test 3a: insert points from file; check range() with random query rectangles
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 3b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
==> passed

Test 3c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
  * 10 random distinct points and random rectangles in a 4-by-4 grid
  * 20 random distinct points and random rectangles in a 8-by-8 grid
  * 100 random distinct points and random rectangles in a 16-by-16 grid
  * 1000 random distinct points and random rectangles in a 64-by-64 grid
  * 10000 random distinct points and random rectangles in a 128-by-128 grid
==> passed

Test 3d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid
  * 5000 random general points and random rectangles in a 16-by-16 grid
  * 5000 random general points and random rectangles in a 128-by-128 grid
  * 5000 random general points and random rectangles in a 1024-by-1024 grid
==> passed

Test 3e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid
  * 10 tiny rectangles and 10 general points in a 4-by-4 grid
  * 20 tiny rectangles and 20 general points in a 8-by-8 grid
  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid
  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
==> passed

Test 4a: insert points from file; check range() with random query rectangles
         and check traversal of kd-tree
  * input5.txt
  * input10.txt
==> passed

Test 4b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of kd-tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
==> passed

Test 5a: insert points from file; check nearest() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
    - failed on trial 4 of 10000
    - sequence of points inserted:
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - query point                   = (0.626, 0.494)
    - student   nearest()           = (0.9, 0.6)
    - reference nearest()           = (0.5, 0.4)
    - student   distanceSquaredTo() = 0.086312
    - reference distanceSquaredTo() = 0.024712

  * input10.txt
    - failed on trial 1 of 10000
    - sequence of points inserted:
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - query point                   = (0.053, 0.688)
    - student   nearest()           = (0.226, 0.577)
    - reference nearest()           = (0.083, 0.51)
    - student   distanceSquaredTo() = 0.04225
    - reference distanceSquaredTo() = 0.032584

==> FAILED

Test 5b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid
    - failed on trial 2 of 10000
    - sequence of points inserted:
      A  0.75 0.25
      B  0.0 0.5
      C  0.5 0.875
      D  0.25 0.0
      E  0.875 0.625
    - query point                   = (0.625, 0.75)
    - student   nearest()           = (0.875, 0.625)
    - reference nearest()           = (0.5, 0.875)
    - student   distanceSquaredTo() = 0.078125
    - reference distanceSquaredTo() = 0.03125

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 3 of 10000
    - sequence of points inserted:
      A  0.8125 0.3125
      B  0.375 0.125
      C  0.5 0.1875
      D  0.3125 0.75
      E  0.1875 0.875
      F  0.875 0.4375
      G  0.5625 1.0
      H  0.625 0.9375
      I  0.6875 0.0625
      J  0.9375 0.6875
    - query point                   = (0.0625, 0.5)
    - student   nearest()           = (0.375, 0.125)
    - reference nearest()           = (0.3125, 0.75)
    - student   distanceSquaredTo() = 0.23828125
    - reference distanceSquaredTo() = 0.125

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - sequence of points inserted:
      A  0.40625 0.78125
      B  0.5625 1.0
      C  0.6875 0.09375
      D  0.9375 0.90625
      E  0.625 0.375
      F  0.3125 0.625
      G  0.0625 0.5
      H  0.15625 0.40625
      I  0.53125 0.0
      J  0.0 0.4375
      K  0.28125 0.59375
      L  0.75 0.9375
      M  0.375 0.03125
      N  0.1875 0.71875
      O  0.59375 0.6875
      P  0.5 0.28125
      Q  0.03125 0.75
      R  0.125 0.25
      S  0.65625 0.0625
      T  0.34375 0.21875
    - query point                   = (0.8125, 0.3125)
    - student   nearest()           = (0.3125, 0.625)
    - reference nearest()           = (0.625, 0.375)
    - student   distanceSquaredTo() = 0.34765625
    - reference distanceSquaredTo() = 0.0390625

  * 30 random non-degenerate points in a 64-by-64 grid
    - failed on trial 1 of 10000
    - query point                   = (0.5, 0.3125)
    - student   nearest()           = (0.234375, 0.421875)
    - reference nearest()           = (0.546875, 0.21875)
    - student   distanceSquaredTo() = 0.08251953125
    - reference distanceSquaredTo() = 0.010986328125

  * 10000 random non-degenerate points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point                   = (0.6086273193359375, 0.1639251708984375)
    - student   nearest()           = (0.9611053466796875, 0.008148193359375)
    - reference nearest()           = (0.6048583984375, 0.1626434326171875)
    - student   distanceSquaredTo() = 0.148507226491347
    - reference distanceSquaredTo() = 0.00001584761776

==> FAILED

Test 5c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
    - failed on trial 1 of 10000
    - sequence of points inserted:
      A  1.0 0.75
      B  0.0 0.5
      C  0.75 1.0
      D  0.25 0.75
      E  0.5 0.75
      F  0.5 0.5
      G  1.0 0.5
      H  0.0 0.0
      I  0.75 0.0
      J  0.75 0.75
    - query point                   = (0.5, 0.25)
    - student   nearest()           = (1.0, 0.5)
    - reference nearest()           = (0.5, 0.5)
    - student   distanceSquaredTo() = 0.3125
    - reference distanceSquaredTo() = 0.0625

  * 15 random distinct points in a 8-by-8 grid
    - failed on trial 3 of 10000
    - sequence of points inserted:
      A  0.625 0.875
      B  0.5 0.875
      C  0.625 0.625
      D  0.625 0.0
      E  0.75 1.0
      F  0.25 0.75
      G  1.0 0.125
      H  0.375 0.875
      I  0.0 0.75
      J  0.0 0.5
      K  0.125 0.25
      L  0.125 0.75
      M  0.75 0.625
      N  0.875 0.625
      O  0.875 0.0
    - query point                   = (0.125, 0.5)
    - student   nearest()           = (0.625, 0.625)
    - reference nearest()           = (0.0, 0.5)
    - student   distanceSquaredTo() = 0.265625
    - reference distanceSquaredTo() = 0.015625

  * 20 random distinct points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - sequence of points inserted:
      A  0.625 0.875
      B  0.8125 0.3125
      C  0.3125 0.0625
      D  0.5625 0.875
      E  0.625 0.1875
      F  0.5625 1.0
      G  0.9375 0.0
      H  0.875 0.0
      I  0.4375 0.5625
      J  0.125 1.0
      K  0.6875 0.25
      L  0.5 0.1875
      M  0.4375 0.0
      N  0.9375 0.5
      O  0.25 0.5625
      P  0.8125 0.375
      Q  0.875 0.3125
      R  0.375 0.9375
      S  0.4375 0.125
      T  0.0 0.6875
    - query point                   = (0.375, 0.25)
    - student   nearest()           = (0.625, 0.1875)
    - reference nearest()           = (0.5, 0.1875)
    - student   distanceSquaredTo() = 0.06640625
    - reference distanceSquaredTo() = 0.01953125

  * 100 random distinct points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - query point                   = (0.8125, 0.84375)
    - student   nearest()           = (0.96875, 0.90625)
    - reference nearest()           = (0.8125, 0.8125)
    - student   distanceSquaredTo() = 0.0283203125
    - reference distanceSquaredTo() = 0.0009765625

  * 10000 random distinct points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point                   = (0.0312347412109375, 0.4835968017578125)
    - student   nearest()           = (0.0797119140625, 0.9796142578125)
    - reference nearest()           = (0.027313232421875, 0.4853515625)
    - student   distanceSquaredTo() = 0.248383352998644
    - reference distanceSquaredTo() = 0.000018457416445

==> FAILED

Test 5d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query point                   = (0.5625, 0.5)
    - student   nearest()           = (1.0, 0.1875)
    - reference nearest()           = (0.5625, 0.5)
    - student   distanceSquaredTo() = 0.2890625
    - reference distanceSquaredTo() = 0

  * 10000 random general points in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query point                   = (0.25, 0.34375)
    - student   nearest()           = (0.3984375, 0.6875)
    - reference nearest()           = (0.25, 0.34375)
    - student   distanceSquaredTo() = 0.14019775390625
    - reference distanceSquaredTo() = 0

  * 10000 random general points in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query point                   = (0.7900390625, 0.890625)
    - student   nearest()           = (0.888671875, 0.7265625)
    - reference nearest()           = (0.791015625, 0.8876953125)
    - student   distanceSquaredTo() = 0.03664493560791
    - reference distanceSquaredTo() = 0.000009536743164

==> FAILED

Test 6a: insert points from file; check nearest() with random query points
         and check traversal of kd-tree
  * input5.txt
    - student   nearest() = (0.4, 0.7)
    - reference nearest() = (0.4, 0.7)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.13, 0.68)
    - sequence of points inserted:
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C D E
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B D
    - failed on trial 2 of 1000

  * input10.txt
    - student   nearest() = (0.862, 0.825)
    - reference nearest() = (0.862, 0.825)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.91, 0.92)
    - sequence of points inserted:
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A C B G H I
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B H I
    - failed on trial 1 of 1000

==> FAILED

Test 6b: insert non-degenerate points; check nearest() with random query points
         and check traversal of kd-tree
  * 5 random non-degenerate points in a 8-by-8 grid
    - student   nearest() = (0.5, 0.75)
    - reference nearest() = (0.5, 0.75)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.0, 0.875)
    - sequence of points inserted:
      A  1.0 1.0
      B  0.375 0.5
      C  0.5 0.75
      D  0.75 0.625
      E  0.625 0.375
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B E C D
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C D E
    - failed on trial 4 of 1000

  * 10 random non-degenerate points in a 16-by-16 grid
    - student   nearest() = (0.0, 0.375)
    - reference nearest() = (0.0, 0.375)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.125, 0.3125)
    - sequence of points inserted:
      A  0.1875 0.6875
      B  0.0 0.375
      C  0.9375 0.8125
      D  0.0625 1.0
      E  1.0 0.25
      F  0.625 0.0625
      G  0.875 0.5625
      H  0.5 0.125
      I  0.375 0.875
      J  0.75 0.5
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B D C
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B D C E F G H J
    - failed on trial 1 of 1000

  * 20 random non-degenerate points in a 32-by-32 grid
    - student   nearest() = (0.46875, 0.0625)
    - reference nearest() = (0.71875, 0.25)
    - student   distanceSquaredTo() = 0.0244140625
    - reference distanceSquaredTo() = 0.0244140625
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.59375, 0.15625)
    - sequence of points inserted:
      A  0.28125 0.28125
      B  0.09375 0.59375
      C  0.75 0.3125
      D  1.0 0.65625
      E  0.0 1.0
      F  0.96875 0.6875
      G  0.4375 0.125
      H  0.9375 0.9375
      I  0.0625 0.75
      J  0.5625 0.84375
      K  0.375 0.4375
      L  0.03125 0.71875
      M  0.625 0.78125
      N  0.65625 0.90625
      O  0.71875 0.25
      P  0.78125 0.46875
      Q  0.46875 0.0625
      R  0.15625 0.0
      S  0.34375 0.96875
      T  0.1875 0.21875
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C G O Q D
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A C G O Q
    - failed on trial 1 of 1000

  * 30 random non-degenerate points in a 64-by-64 grid
    - student   nearest() = (0.734375, 0.6875)
    - reference nearest() = (0.484375, 0.703125)
    - student   distanceSquaredTo() = 0.0283203125
    - reference distanceSquaredTo() = 0.010986328125
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 7
    - number of reference entries = 15
    - entry 1 of the two sequences are not equal
    - student   entry 1 = (0.09375, 0.171875)
    - reference entry 1 = (0.71875, 0.65625)

    - failed on trial 1 of 1000

  * 50 random non-degenerate points in a 128-by-128 grid
    - student   nearest() = (0.4140625, 0.296875)
    - reference nearest() = (0.6171875, 0.34375)
    - student   distanceSquaredTo() = 0.020751953125
    - reference distanceSquaredTo() = 0.004150390625
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 3
    - number of reference entries = 19
    - entry 1 of the two sequences are not equal
    - student   entry 1 = (0.2578125, 0.1796875)
    - reference entry 1 = (0.78125, 0.2734375)

    - failed on trial 1 of 1000

  * 1000 random non-degenerate points in a 2048-by-2048 grid
    - student   nearest() = (0.947265625, 0.29736328125)
    - reference nearest() = (0.84033203125, 0.52099609375)
    - student   distanceSquaredTo() = 0.066394090652466
    - reference distanceSquaredTo() = 0.00059986114502
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 5
    - number of reference entries = 23
    - entry 1 of the two sequences are not equal
    - student   entry 1 = (0.32421875, 0.99951171875)
    - reference entry 1 = (0.947265625, 0.29736328125)

    - failed on trial 1 of 1000

==> FAILED

Test 7: check with no points
  * size() and isEmpty()
  * contains()
  * nearest()
  * range()
==> passed

Test 8: check that the specified exception is thrown with null arguments
  * argument to insert() is null
  * argument to contains() is null
  * argument to range() is null
  * argument to nearest() is null
==> passed

Test 9a: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 17 of 20000
    - student   nearest()  = (0.375, 0.875)
    - reference nearest()  = (0.125, 0.6875)
    - student   distanceSquaredTo() = 0.203125
    - reference distanceSquaredTo() = 0.01953125
    - sequence of operations was:
           st.insert(0.375, 0.875)
           st.size()  ==>  1
           st.insert(0.0625, 0.125)
           st.insert(0.8125, 0.5)
           st.nearest((1.0, 0.9375))   ==>  (0.8125, 0.5)
           st.nearest((0.5625, 0.1875))   ==>  (0.8125, 0.5)
           st.contains((0.4375, 0.5625))  ==>  false
           st.contains((0.6875, 0.0))  ==>  false
           st.insert(0.875, 0.25)
           st.insert(0.9375, 0.0625)
           st.insert(0.5, 0.0)
           st.nearest((0.75, 0.375))   ==>  (0.8125, 0.5)
           st.contains((0.6875, 1.0))  ==>  false
           st.size()  ==>  6
           st.insert(0.125, 0.6875)
           st.contains((0.625, 1.0))  ==>  false
           st.nearest((0.0, 0.625))   ==>  (0.375, 0.875)

  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 19 of 20000
    - student   nearest()  = (0.984375, 1.0)
    - reference nearest()  = (0.6640625, 0.8203125)
    - student   distanceSquaredTo() = 0.0802001953125
    - reference distanceSquaredTo() = 0.0078125
    - sequence of operations was:
           st.size()  ==>  0
           st.insert(0.984375, 1.0)
           st.range([0.5625, 0.7109375] x [0.671875, 0.765625])  ==>  empty
           st.nearest((0.5234375, 0.375))   ==>  (0.984375, 1.0)
           st.contains((0.2421875, 0.71875))  ==>  false
           st.contains((0.203125, 0.1640625))  ==>  false
           st.isEmpty()  ==>  false
           st.contains((0.84375, 0.4609375))  ==>  false
           st.isEmpty()  ==>  false
           st.nearest((0.1171875, 0.4453125))   ==>  (0.984375, 1.0)
           st.insert(0.1796875, 0.6015625)
           st.contains((0.4453125, 0.109375))  ==>  false
           st.range([0.015625, 0.0390625] x [0.203125, 0.71875])  ==>  empty
           st.insert(0.5390625, 0.3515625)
           st.range([0.78125, 0.9921875] x [0.5, 0.953125])  ==>  empty
           st.insert(0.078125, 0.625)
           st.insert(0.6640625, 0.8203125)
           st.insert(0.96875, 0.6171875)
           st.nearest((0.7265625, 0.8828125))   ==>  (0.984375, 1.0)

  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 16 of 20000
    - student   nearest()  = (0.001953125, 0.9619140625)
    - reference nearest()  = (0.859375, 0.5205078125)
    - student   distanceSquaredTo() = 0.57222843170166
    - reference distanceSquaredTo() = 0.129033088684082
    - sequence of operations was:
           st.insert(0.001953125, 0.9619140625)
           st.nearest((0.3291015625, 0.2099609375))   ==>  (0.001953125, 0.9619140625)
           st.size()  ==>  1
           st.range([0.193359375, 0.7158203125] x [0.5869140625, 0.724609375])  ==>  empty
           st.contains((0.8095703125, 0.240234375))  ==>  false
           st.nearest((0.82421875, 0.560546875))   ==>  (0.001953125, 0.9619140625)
           st.insert(0.802734375, 0.0078125)
           st.range([0.0498046875, 0.4462890625] x [0.4267578125, 0.521484375])  ==>  empty
           st.insert(0.5537109375, 0.1416015625)
           st.nearest((0.7958984375, 0.333984375))   ==>  (0.5537109375, 0.1416015625)
           st.contains((0.462890625, 0.5068359375))  ==>  false
           st.contains((0.849609375, 0.515625))  ==>  false
           st.insert(0.859375, 0.5205078125)
           st.contains((0.365234375, 0.8662109375))  ==>  false
           st.range([0.1611328125, 0.1767578125] x [0.46484375, 0.9404296875])  ==>  empty
           st.nearest((0.751953125, 0.86328125))   ==>  (0.001953125, 0.9619140625)

  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 16 of 20000
    - student   nearest()  = (0.372314453125, 0.89453125)
    - reference nearest()  = (0.5640869140625, 0.37890625)
    - student   distanceSquaredTo() = 0.129802837967873
    - reference distanceSquaredTo() = 0.036044359207153
    - sequence of operations was:
           st.insert(0.372314453125, 0.89453125)
           st.contains((0.102783203125, 0.98876953125))  ==>  false
           st.contains((0.4027099609375, 0.117431640625))  ==>  false
           st.contains((0.01953125, 0.226318359375))  ==>  false
           st.range([0.093505859375, 0.7862548828125] x [0.181396484375, 0.672607421875])  ==>  empty
           st.contains((0.5235595703125, 0.71728515625))  ==>  false
           st.contains((0.8924560546875, 0.4617919921875))  ==>  false
           st.range([0.9012451171875, 0.9080810546875] x [0.7503662109375, 0.8724365234375])  ==>  empty
           st.isEmpty()  ==>  false
           st.insert(0.9344482421875, 0.7054443359375)
           st.range([0.4027099609375, 0.60595703125] x [0.1949462890625, 0.9337158203125])  ==>  empty
           st.insert(0.0260009765625, 0.407470703125)
           st.insert(0.5640869140625, 0.37890625)
           st.insert(0.84716796875, 0.9842529296875)
           st.isEmpty()  ==>  false
           st.nearest((0.4986572265625, 0.55712890625))   ==>  (0.372314453125, 0.89453125)

  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 30 of 20000
    - student   nearest()  = (0.6925201416015625, 0.37188720703125)
    - reference nearest()  = (0.36968994140625, 0.5279998779296875)
    - student   distanceSquaredTo() = 0.197206878336146
    - reference distanceSquaredTo() = 0.021405263105407

==> FAILED

Test 9b: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 17 of 20000
    - student   nearest()  = (0.125, 0.3125)
    - reference nearest()  = (0.375, 0.625)
    - student   distanceSquaredTo() = 0.640625
    - reference distanceSquaredTo() = 0.16015625
    - sequence of operations was:
           st.insert(0.125, 0.3125)
           st.range([0.6875, 0.8125] x [0.3125, 0.625])  ==>  empty
           st.range([0.6875, 1.0] x [0.3125, 0.75])  ==>  empty
           st.insert(0.0, 0.375)
           st.contains((0.5625, 0.6875))  ==>  false
           st.contains((0.875, 0.5))  ==>  false
           st.size()  ==>  2
           st.size()  ==>  2
           st.contains((0.0625, 0.1875))  ==>  false
           st.contains((1.0, 0.6875))  ==>  false
           st.nearest((0.125, 0.5625))   ==>  (0.0, 0.375)
           st.contains((0.0625, 0.9375))  ==>  false
           st.nearest((0.4375, 0.4375))   ==>  (0.125, 0.3125)
           st.contains((0.625, 0.125))  ==>  false
           st.insert(0.8125, 0.0625)
           st.insert(0.375, 0.625)
           st.nearest((0.625, 0.9375))   ==>  (0.125, 0.3125)

  * 20000 calls with distinct points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 35 of 20000
    - student   nearest()  = (0.3046875, 0.2421875)
    - reference nearest()  = (0.375, 0.3203125)
    - student   distanceSquaredTo() = 0.006103515625
    - reference distanceSquaredTo() = 0.00494384765625

  * 20000 calls with distinct points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 39 of 20000
    - student   nearest()  = (0.2294921875, 0.9677734375)
    - reference nearest()  = (0.4912109375, 0.626953125)
    - student   distanceSquaredTo() = 0.246579170227051
    - reference distanceSquaredTo() = 0.24608039855957

  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 21 of 20000
    - student   nearest()  = (0.4522705078125, 0.219970703125)
    - reference nearest()  = (0.3643798828125, 0.6239013671875)
    - student   distanceSquaredTo() = 0.155719473958015
    - reference distanceSquaredTo() = 0.011478006839752
    - sequence of operations was:
           st.insert(0.1370849609375, 0.030517578125)
           st.insert(0.4522705078125, 0.219970703125)
           st.range([0.316162109375, 0.70703125] x [0.050537109375, 0.42333984375])  ==>  S
           st.insert(0.7327880859375, 0.2939453125)
           st.range([0.3231201171875, 0.8062744140625] x [0.5478515625, 0.6373291015625])  ==>  empty
           st.range([0.3775634765625, 0.3978271484375] x [0.1199951171875, 0.176513671875])  ==>  empty
           st.size()  ==>  3
           st.insert(0.9378662109375, 0.5433349609375)
           st.range([0.267578125, 0.527587890625] x [0.3892822265625, 0.912109375])  ==>  empty
           st.size()  ==>  4
           st.range([0.172119140625, 0.6983642578125] x [0.7452392578125, 0.8690185546875])  ==>  empty
           st.insert(0.7080078125, 0.86328125)
           st.contains((0.6861572265625, 0.17919921875))  ==>  false
           st.nearest((0.106201171875, 0.5853271484375))   ==>  (0.4522705078125, 0.219970703125)
           st.insert(0.3643798828125, 0.6239013671875)
           st.contains((0.8172607421875, 0.10400390625))  ==>  false
           st.range([0.0089111328125, 0.579345703125] x [0.18798828125, 0.331298828125])  ==>  S
           st.insert(0.5281982421875, 0.998779296875)
           st.insert(0.1402587890625, 0.9761962890625)
           st.insert(0.4296875, 0.05712890625)
           st.nearest((0.4710693359375, 0.6141357421875))   ==>  (0.4522705078125, 0.219970703125)

  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 14 of 20000
    - student   nearest()  = (0.41534423828125, 0.7569732666015625)
    - reference nearest()  = (0.2072906494140625, 0.9617919921875)
    - student   distanceSquaredTo() = 0.09940448240377
    - reference distanceSquaredTo() = 0.002665288047865
    - sequence of operations was:
           st.insert(0.41534423828125, 0.7569732666015625)
           st.insert(0.7080841064453125, 0.6564788818359375)
           st.insert(0.1999053955078125, 0.1415252685546875)
           st.contains((0.10589599609375, 0.7268524169921875))  ==>  false
           st.contains((0.167999267578125, 0.6716461181640625))  ==>  false
           st.insert(0.2072906494140625, 0.9617919921875)
           st.nearest((0.9627685546875, 0.5144195556640625))   ==>  (0.7080841064453125, 0.6564788818359375)
           st.insert(0.8737640380859375, 0.0100555419921875)
           st.contains((0.6836700439453125, 0.775909423828125))  ==>  false
           st.contains((0.399810791015625, 0.80316162109375))  ==>  false
           st.range([0.1443939208984375, 0.251739501953125] x [0.2898712158203125, 0.6800537109375])  ==>  empty
           st.contains((0.796875, 0.683929443359375))  ==>  false
           st.range([0.5167236328125, 0.945526123046875] x [0.18023681640625, 0.6488494873046875])  ==>  empty
           st.nearest((0.1597747802734375, 0.9416046142578125))   ==>  (0.41534423828125, 0.7569732666015625)

==> FAILED

Test 9c: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 20 of 20000
    - student   contains() = false
    - reference contains() = true
    - sequence of operations was:
           st.size()  ==>  0
           st.insert(0.0, 0.0)
           st.range([0.0, 0.0] x [0.0, 1.0])  ==>  R
           st.contains((0.0, 0.0))  ==>  true
           st.size()  ==>  1
           st.isEmpty()  ==>  false
           st.nearest((1.0, 1.0))   ==>  (0.0, 0.0)
           st.contains((0.0, 0.0))  ==>  true
           st.nearest((0.0, 1.0))   ==>  (0.0, 0.0)
           st.contains((0.0, 1.0))  ==>  false
           st.nearest((0.0, 1.0))   ==>  (0.0, 0.0)
           st.contains((1.0, 0.0))  ==>  false
           st.contains((1.0, 1.0))  ==>  false
           st.insert(1.0, 1.0)
           st.range([0.0, 1.0] x [0.0, 1.0])  ==>  R U
           st.insert(0.0, 1.0)
           st.insert(1.0, 1.0)
           st.nearest((1.0, 1.0))   ==>  (1.0, 1.0)
           st.contains((1.0, 0.0))  ==>  false
           st.contains((0.0, 1.0))  ==>  false

  * 20000 calls with general points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 31 of 20000
    - student   nearest()  = (0.75, 0.6875)
    - reference nearest()  = (0.625, 0.375)
    - student   distanceSquaredTo() = 0.203125
    - reference distanceSquaredTo() = 0.01953125

  * 20000 calls with general points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 22 of 20000
    - student   nearest()  = (0.71875, 0.515625)
    - reference nearest()  = (0.6640625, 0.546875)
    - student   distanceSquaredTo() = 0.19732666015625
    - reference distanceSquaredTo() = 0.1456298828125
    - sequence of operations was:
           st.insert(0.703125, 0.9140625)
           st.size()  ==>  1
           st.range([0.0703125, 0.140625] x [0.203125, 0.8359375])  ==>  empty
           st.nearest((0.25, 0.546875))   ==>  (0.703125, 0.9140625)
           st.contains((0.1796875, 0.96875))  ==>  false
           st.insert(0.5859375, 0.9921875)
           st.contains((0.8984375, 0.59375))  ==>  false
           st.isEmpty()  ==>  false
           st.size()  ==>  2
           st.nearest((0.1875, 0.390625))   ==>  (0.5859375, 0.9921875)
           st.contains((0.578125, 0.7734375))  ==>  false
           st.isEmpty()  ==>  false
           st.nearest((0.9375, 0.2890625))   ==>  (0.703125, 0.9140625)
           st.range([0.5625, 0.65625] x [0.0546875, 0.1953125])  ==>  empty
           st.contains((0.5625, 0.9375))  ==>  false
           st.insert(0.6640625, 0.546875)
           st.insert(0.71875, 0.515625)
           st.contains((0.6171875, 0.2109375))  ==>  false
           st.range([0.09375, 0.90625] x [0.546875, 0.9140625])  ==>  T B
           st.isEmpty()  ==>  false
           st.nearest((0.7734375, 0.6171875))   ==>  (0.71875, 0.515625)
           st.nearest((0.3125, 0.6953125))   ==>  (0.71875, 0.515625)

  * 20000 calls with general points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 11 of 20000
    - student   nearest()  = (0.46484375, 0.5771484375)
    - reference nearest()  = (0.4091796875, 0.4716796875)
    - student   distanceSquaredTo() = 0.087105751037598
    - reference distanceSquaredTo() = 0.059757232666016
    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.insert(0.46484375, 0.5771484375)
           st.nearest((0.7314453125, 0.6083984375))   ==>  (0.46484375, 0.5771484375)
           st.nearest((0.958984375, 0.376953125))   ==>  (0.46484375, 0.5771484375)
           st.nearest((0.5810546875, 0.60546875))   ==>  (0.46484375, 0.5771484375)
           st.insert(0.1572265625, 0.1240234375)
           st.insert(0.505859375, 0.7509765625)
           st.range([0.3681640625, 0.986328125] x [0.4462890625, 0.9541015625])  ==>  L X
           st.insert(0.4091796875, 0.4716796875)
           st.range([0.6962890625, 0.82421875] x [0.0751953125, 0.2734375])  ==>  empty
           st.nearest((0.1728515625, 0.5341796875))   ==>  (0.46484375, 0.5771484375)

  * 20000 calls with general points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 11 of 20000
    - student   nearest()  = (0.5985107421875, 0.5491943359375)
    - reference nearest()  = (0.585693359375, 0.657470703125)
    - student   distanceSquaredTo() = 0.059605270624161
    - reference distanceSquaredTo() = 0.047670602798462
    - sequence of operations was:
           st.insert(0.5985107421875, 0.5491943359375)
           st.contains((0.225830078125, 0.02587890625))  ==>  false
           st.range([0.64306640625, 0.9993896484375] x [0.8785400390625, 0.9326171875])  ==>  empty
           st.nearest((0.10205078125, 0.749267578125))   ==>  (0.5985107421875, 0.5491943359375)
           st.nearest((0.78076171875, 0.4051513671875))   ==>  (0.5985107421875, 0.5491943359375)
           st.insert(0.134521484375, 0.8134765625)
           st.insert(0.585693359375, 0.657470703125)
           st.insert(0.3006591796875, 0.610595703125)
           st.insert(0.1915283203125, 0.86474609375)
           st.insert(0.6767578125, 0.954345703125)
           st.nearest((0.802490234375, 0.683349609375))   ==>  (0.5985107421875, 0.5491943359375)

  * 20000 calls with general points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 20 of 20000
    - student   nearest()  = (0.063201904296875, 0.9053802490234375)
    - reference nearest()  = (0.2642822265625, 0.5541229248046875)
    - student   distanceSquaredTo() = 0.285049632191658
    - reference distanceSquaredTo() = 0.066464212723076
    - sequence of operations was:
           st.insert(0.8933258056640625, 0.0772552490234375)
           st.nearest((0.9703216552734375, 0.225341796875))   ==>  (0.8933258056640625, 0.0772552490234375)
           st.nearest((0.42974853515625, 0.826751708984375))   ==>  (0.8933258056640625, 0.0772552490234375)
           st.insert(0.3096771240234375, 0.9367828369140625)
           st.contains((0.505767822265625, 0.767547607421875))  ==>  false
           st.insert(0.063201904296875, 0.9053802490234375)
           st.nearest((0.7675933837890625, 0.9915313720703125))   ==>  (0.3096771240234375, 0.9367828369140625)
           st.range([0.395965576171875, 0.7895660400390625] x [0.1775360107421875, 0.2137298583984375])  ==>  empty
           st.range([0.2596893310546875, 0.964752197265625] x [0.389404296875, 0.67047119140625])  ==>  empty
           st.range([0.0909576416015625, 0.11651611328125] x [0.7713775634765625, 0.8897705078125])  ==>  empty
           st.isEmpty()  ==>  false
           st.contains((0.560516357421875, 0.973419189453125))  ==>  false
           st.contains((0.6853790283203125, 0.164642333984375))  ==>  false
           st.range([0.370391845703125, 0.48095703125] x [0.805328369140625, 0.963409423828125])  ==>  empty
           st.isEmpty()  ==>  false
           st.nearest((0.3909759521484375, 0.4644927978515625))   ==>  (0.3096771240234375, 0.9367828369140625)
           st.contains((0.12286376953125, 0.695098876953125))  ==>  false
           st.insert(0.71539306640625, 0.751434326171875)
           st.insert(0.2642822265625, 0.5541229248046875)
           st.nearest((0.082000732421875, 0.3718109130859375))   ==>  (0.063201904296875, 0.9053802490234375)

==> FAILED

Test 10: insert n random points into two different KdTree objects;
        check that repeated calls to size(), contains(), range(),
        and nearest() with the same arguments yield same results
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 100 random general points in a 128-by-128 grid
  * 1000 random general points in a 65536-by-65536 grid
==> passed


Total: 14/27 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes

================================================================



Analyzing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes

================================================================



Analyzing memory of PointSET
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a PointSET with n points (including Point2D and RectHV objects).
Maximum allowed memory is 96n + 200 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          240                264
=> passed        2          336                360
=> passed        5          624                648
=> passed       10         1104               1128
=> passed       25         2544               2568
=> passed      100         9744               9768
=> passed      400        38544              38568
=> passed      800        76944              76968
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 96.00 n + 144.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)

================================================================



Analyzing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with n points (including Point2D and RectHV objects).
Maximum allowed memory is 312n + 192 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          136                160
=> passed        2          224                288
=> passed        5          488                672
=> passed       10          928               1312
=> passed       25         2248               3232
=> passed      100         8848              12832
=> passed      400        35248              51232
=> passed      800        70448             102432
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 88.00 n + 48.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 14 total tests.


Inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000    1884845
=> passed   320000    1951780
=> passed   640000    1822051
=> passed  1280000    1256489
==> 4/4 tests passed

Performing contains() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000     883317
=> passed   320000     853036
=> passed   640000     658892
=> passed  1280000     597617
==> 4/4 tests passed

Performing range() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       4254
=> passed    20000       1611
=> passed    40000        721
==> 3/3 tests passed

Performing nearest() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       5337
=> passed    20000       1821
=> passed    40000        791
==> 3/3 tests passed

Total: 14/14 tests passed!


================================================================



Timing KdTree
*-----------------------------------------------------------
Running 28 total tests.


Test 1a-d: Insert n points into a 2d tree. The table gives the average number of calls
           to methods in RectHV and Point per call to insert().

                                                                                                Point2D
               n      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=> passed   160000    1721428               0.0              44.3              42.3              21.6
=> passed   320000    1715180               0.0              45.1              43.1              22.0
=> passed   640000    1221212               0.0              48.1              46.1              23.5
=> passed  1280000     963037               0.0              52.3              50.3              25.6
==> 4/4 tests passed


Test 2a-h: Perform contains() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to contains().

                                                                               Point2D
               n      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=> passed    10000    1566665               0.0               0.0               0.0
=> passed    20000    1709539               0.0               0.0               0.0
=> passed    40000    1718463               0.0               0.0               0.0
=> passed    80000    1735961               0.0               0.0               0.0
=> passed   160000    1725485               0.0               0.0               0.0
=> passed   320000    1726626               0.0               0.0               0.0
=> passed   640000    1734414               0.0               0.0               0.0
=> passed  1280000    1725483               0.0               0.0               0.0
==> 8/8 tests passed


Test 3a-h: Perform range() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to range().

               n      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=> passed    10000     389712              50.4              31.1              81.9              42.5
=> passed    20000     560322              52.7              32.6              85.9              48.8
=> passed    40000     437352              64.9              39.3             103.2              52.7
=> passed    80000     471260              67.1              40.7             106.5              55.0
=> passed   160000     353209              70.0              42.5             113.1              63.2
=> passed   320000     268150              67.0              40.2             105.7              55.7
=> passed   640000     256381              72.0              43.3             113.8              62.6
=> passed  1280000     170088              78.7              47.0             123.0              60.1
==> 8/8 tests passed


Test 4a-h: Perform nearest() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               n      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=> FAILED    10000  1570321                   6.9                    0.0                     0.0   (0.0x)      0.0

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.
