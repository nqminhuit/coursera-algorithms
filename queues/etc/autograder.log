See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED (0 errors, 3 warnings)
API:          PASSED

Spotbugs:     PASSED
PMD:          PASSED
Checkstyle:   PASSED

Correctness:  24/43 tests passed
Memory:       88/123 tests passed
Timing:       136/193 tests passed

Aggregate score: 64.74%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
4.6K Apr  1 04:08 Deque.java
 932 Apr  1 04:08 Permutation.java
3.2K Apr  1 04:08 RandomizedQueue.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac11 Deque.java
*-----------------------------------------------------------

% javac11 RandomizedQueue.java
*-----------------------------------------------------------
RandomizedQueue.java:20: warning: [unchecked] unchecked cast
        items = (Item[]) new Object[1];
                         ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
RandomizedQueue.java:51: warning: [unchecked] unchecked cast
        Item[] copy = (Item[]) new Object[capacity];
                               ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
RandomizedQueue.java:67: warning: [unchecked] unchecked cast
        Item[] shuffled = (Item[]) new Object[size];
                                   ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
3 warnings

% javac11 Permutation.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Deque:

RandomizedQueue:

Permutation:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for Deque.java
*-----------------------------------------------------------

% custom checkstyle checks for RandomizedQueue.java
*-----------------------------------------------------------

% custom checkstyle checks for Permutation.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Deque
*-----------------------------------------------------------
Running 16 total tests.

Tests 1-6 make random calls to addFirst(), addLast(), removeFirst(),
removeLast(), isEmpty(), and size(). The probabilities of each
operation are (p1, p2, p3, p4, p5, p6), respectively.

Test 1: check random calls to addFirst(), addLast(), and size()
  *    5 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  *   50 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  *  500 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  * 1000 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
==> passed

Test 2: check random calls to addFirst(), removeFirst(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
==> passed

Test 3: check random calls to addFirst(), removeLast(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *  500 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  * 1000 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)

    java.lang.NullPointerException

    Deque$MyStack.pop(Deque.java:135)
    Deque.removeLast(Deque.java:74)
    TestDeque.random(TestDeque.java:106)
    TestDeque.test3(TestDeque.java:474)
    TestDeque.main(TestDeque.java:851)


  *    5 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
  *   50 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)

    java.lang.NullPointerException

    Deque$MyStack.pop(Deque.java:135)
    Deque.removeLast(Deque.java:74)
    TestDeque.random(TestDeque.java:106)
    TestDeque.test3(TestDeque.java:476)
    TestDeque.main(TestDeque.java:851)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addFirst(1)
         deque.removeLast()      ==> 1
         deque.isEmpty()         ==> true
         deque.isEmpty()         ==> true
         deque.isEmpty()         ==> true
         deque.isEmpty()         ==> true
         deque.isEmpty()         ==> true
         deque.addFirst(8)
         deque.isEmpty()         ==> false
         deque.removeLast()

  *  500 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)

    java.lang.NullPointerException

    Deque$MyStack.pop(Deque.java:135)
    Deque.removeLast(Deque.java:74)
    TestDeque.random(TestDeque.java:106)
    TestDeque.test3(TestDeque.java:477)
    TestDeque.main(TestDeque.java:851)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.isEmpty()         ==> true
         deque.isEmpty()         ==> true
         deque.addFirst(3)
         deque.addFirst(4)
         deque.removeLast()      ==> 3
         deque.removeLast()      ==> 4
         deque.addFirst(7)
         deque.removeLast()

  * 1000 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)

    java.lang.NullPointerException

    Deque$MyStack.pop(Deque.java:135)
    Deque.removeLast(Deque.java:74)
    TestDeque.random(TestDeque.java:106)
    TestDeque.test3(TestDeque.java:478)
    TestDeque.main(TestDeque.java:851)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addFirst(1)
         deque.isEmpty()         ==> false
         deque.removeLast()      ==> 1
         deque.isEmpty()         ==> true
         deque.addFirst(5)
         deque.removeLast()

==> FAILED

Test 4: check random calls to addLast(), removeLast(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *  500 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  * 1000 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *    5 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  *   50 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  *  500 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  * 1000 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
==> passed

Test 5: check random calls to addLast(), removeFirst(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *  500 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  * 1000 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *    5 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  *   50 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)

    java.lang.NullPointerException

    Deque$MyQueue.dequeue(Deque.java:157)
    Deque.removeFirst(Deque.java:65)
    TestDeque.random(TestDeque.java:87)
    TestDeque.test5(TestDeque.java:508)
    TestDeque.main(TestDeque.java:853)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addLast(1)
         deque.isEmpty()         ==> false
         deque.removeFirst()     ==> 1
         deque.isEmpty()         ==> true
         deque.isEmpty()         ==> true
         deque.isEmpty()         ==> true
         deque.addLast(7)
         deque.removeFirst()

  *  500 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)

    java.lang.NullPointerException

    Deque$MyQueue.dequeue(Deque.java:157)
    Deque.removeFirst(Deque.java:65)
    TestDeque.random(TestDeque.java:87)
    TestDeque.test5(TestDeque.java:509)
    TestDeque.main(TestDeque.java:853)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.isEmpty()         ==> true
         deque.addLast(2)
         deque.removeFirst()     ==> 2
         deque.addLast(4)
         deque.removeFirst()

  * 1000 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)

    java.lang.NullPointerException

    Deque$MyQueue.dequeue(Deque.java:157)
    Deque.removeFirst(Deque.java:65)
    TestDeque.random(TestDeque.java:87)
    TestDeque.test5(TestDeque.java:510)
    TestDeque.main(TestDeque.java:853)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addLast(1)
         deque.removeFirst()     ==> 1
         deque.isEmpty()         ==> true
         deque.isEmpty()         ==> true
         deque.isEmpty()         ==> true
         deque.isEmpty()         ==> true
         deque.addLast(7)
         deque.isEmpty()         ==> false
         deque.removeFirst()

==> FAILED

Test 6: check random calls to addFirst(), addLast(), removeFirst(),
        removeLast(), isEmpty(), and size()
  *    5 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *   50 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *  500 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)

    java.lang.NullPointerException

    Deque$MyStack.pop(Deque.java:135)
    Deque.removeLast(Deque.java:74)
    TestDeque.random(TestDeque.java:106)
    TestDeque.test6(TestDeque.java:523)
    TestDeque.main(TestDeque.java:854)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.size()            ==> 0
         deque.isEmpty()         ==> true
         deque.addLast(3)
         deque.removeLast()      ==> 3
         deque.isEmpty()         ==> true
         deque.isEmpty()         ==> true
         deque.size()            ==> 0
         deque.addFirst(8)
         deque.removeLast()

  * 1000 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *    5 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
  *   50 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
    - failed on operation 12 of 50
    - student   removeFirst() = 11
    - reference removeFirst() = 10

  *  500 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
    - failed on operation 9 of 500
    - student   removeLast() = 2
    - reference removeLast() = 8
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addFirst(1)
         deque.addFirst(2)
         deque.removeFirst()     ==> 2
         deque.removeLast()      ==> 1
         deque.size()            ==> 0
         deque.addFirst(6)
         deque.removeFirst()     ==> 6
         deque.addFirst(8)
         deque.removeLast()      ==> 2

  * 1000 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)

    java.lang.NullPointerException

    Deque$MyStack.pop(Deque.java:135)
    Deque.removeLast(Deque.java:74)
    TestDeque.random(TestDeque.java:106)
    TestDeque.test6(TestDeque.java:528)
    TestDeque.main(TestDeque.java:854)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addFirst(1)
         deque.addFirst(2)
         deque.removeLast()      ==> 1
         deque.removeLast()      ==> 2
         deque.isEmpty()         ==> true
         deque.addFirst(6)
         deque.removeLast()

==> FAILED

Test 7: check removeFirst() and removeLast() from an empty deque
  * removeFirst()
  * removeLast()
==> passed

Test 8: check whether two Deque objects can be created at the same time
  * n = 10
  * n = 1000
==> passed

Test 9: check iterator() after n calls to addFirst()
  * n = 10
  * n = 50
==> passed

Test 10: check iterator() after each of m intermixed calls to
         addFirst(), addLast(), removeFirst(), and removeLast()
  * m = 20
    - number of student   entries = 4
    - number of reference entries = 3
    - iterator() failed after applying operation 5
    - sequence of operations was:
         Deque deque<Integer> = new Deque<Integer>()
         deque.addFirst(1)
         deque.addFirst(2)
         deque.addFirst(3)
         deque.addLast(4)
         deque.removeLast()    ==> 4

  * m = 50
    - number of student   entries = 0
    - number of reference entries = 1
    - iterator() failed after applying operation 3
    - sequence of operations was:
         Deque deque<Integer> = new Deque<Integer>()
         deque.addFirst(1)
         deque.removeFirst()   ==> 1
         deque.addLast(3)

  * m = 100

    java.util.NoSuchElementException: Cannot perform operation on an empty Queue!

    Deque$ListItorator.next(Deque.java:102)
    SafeIterable$SafeIterator.next(SafeIterable.java:61)
    UtilCOS.compareAsSequences(UtilCOS.java:801)
    UtilCOS.compareAsSequences(UtilCOS.java:794)
    TestDeque.checkIteratorAfterIntermixedOperations(TestDeque.java:276)
    TestDeque.test10(TestDeque.java:629)
    TestDeque.main(TestDeque.java:858)

    - sequence of operations was:
         Deque deque<Integer> = new Deque<Integer>()
         deque.addFirst(1)
         deque.removeLast()    ==> 1

  * m = 1000
    - number of student   entries = 5
    - number of reference entries = 4
    - iterator() failed after applying operation 10
    - sequence of operations was:
         Deque deque<Integer> = new Deque<Integer>()
         deque.addFirst(1)
         deque.addFirst(2)
         deque.addLast(3)
         deque.addLast(4)
         deque.addFirst(5)
         deque.removeFirst()   ==> 5
         deque.addLast(7)
         deque.addFirst(8)
         deque.removeFirst()   ==> 8
         deque.removeLast()    ==> 7

==> FAILED

Test 11: create two nested iterators to same deque
  * n = 10
  * n = 50
==> passed

Test 12: create two parallel iterators to same deque
==> passed

Test 13: create Deque objects of different parameterized types
==> passed

Test 14: call addFirst() and addLast() with null argument
==> passed

Test 15: check that remove() and next() throw the specified exceptions in iterator()
    - throws wrong exception when calling next() when iterator is exhausted
    - throws a java.lang.NullPointerException
    - should throw a java.util.NoSuchElementException

==> FAILED

Test 16: call iterator() when the deque is empty
==> passed


Total: 11/16 tests passed!


================================================================
Testing correctness of RandomizedQueue
*-----------------------------------------------------------
Running 18 total tests.

Tests 1-4 make random calls to enqueue(), dequeue(), sample(),
isEmpty(), and size(). The probabilities of each operation are
(p1, p2, p3, p4, p5), respectively.

Test 1: check random calls to enqueue() and size()
  *    5 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *   50 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *  500 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  * 1000 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
==> passed

Test 2: check random calls to enqueue() and dequeue()
  *    5 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *   50 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *  500 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  * 1000 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *    5 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  *   50 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  *  500 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  * 1000 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
==> passed

Test 3: check random calls to enqueue(), sample(), and size()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.1)

    java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1

    RandomizedQueue$ListIterator.next(RandomizedQueue.java:115)
    RandomizedQueue.sample(RandomizedQueue.java:92)
    TestRandomizedQueue.random(TestRandomizedQueue.java:152)
    TestRandomizedQueue.test3(TestRandomizedQueue.java:765)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1194)

    - sequence of dequeue operations was:
         RandomizedQueue<Integer> rq = new RandomizedQueue<Integer>()
         rq.enqueue(31)
         rq.sample()      ==> 31
         rq.sample()

  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.1)

    java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1

    RandomizedQueue$ListIterator.next(RandomizedQueue.java:115)
    RandomizedQueue.sample(RandomizedQueue.java:92)
    TestRandomizedQueue.random(TestRandomizedQueue.java:152)
    TestRandomizedQueue.test3(TestRandomizedQueue.java:766)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1194)

    - sequence of dequeue operations was:
         RandomizedQueue<Integer> rq = new RandomizedQueue<Integer>()
         rq.size()        ==> 0
         rq.enqueue(182)
         rq.sample()      ==> 182
         rq.sample()

  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1)

    java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1

    RandomizedQueue$ListIterator.next(RandomizedQueue.java:115)
    RandomizedQueue.sample(RandomizedQueue.java:92)
    TestRandomizedQueue.random(TestRandomizedQueue.java:152)
    TestRandomizedQueue.test3(TestRandomizedQueue.java:767)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1194)

    - sequence of dequeue operations was:
         RandomizedQueue<Integer> rq = new RandomizedQueue<Integer>()
         rq.size()        ==> 0
         rq.enqueue(210)
         rq.sample()      ==> 210
         rq.sample()

==> FAILED

Test 4: check random calls to enqueue(), dequeue(), sample(), isEmpty(), and size()
  *    5 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *   50 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *  500 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  * 1000 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *    5 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
  *   50 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
  *  500 random calls (0.1, 0.6, 0.1, 0.1, 0.1)

    java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1

    RandomizedQueue$ListIterator.next(RandomizedQueue.java:115)
    RandomizedQueue.sample(RandomizedQueue.java:92)
    TestRandomizedQueue.random(TestRandomizedQueue.java:152)
    TestRandomizedQueue.test4(TestRandomizedQueue.java:780)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1197)

    - sequence of dequeue operations was:
         RandomizedQueue<Integer> rq = new RandomizedQueue<Integer>()
         rq.size()        ==> 0
         rq.size()        ==> 0
         rq.size()        ==> 0
         rq.enqueue(394)
         rq.dequeue()     ==> 394
         rq.enqueue(87)
         rq.dequeue()     ==> 87
         rq.enqueue(120)
         rq.sample()      ==> 120
         rq.sample()

  * 1000 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
    - failed on operation 112 of 1000
    - sample() returned null

==> FAILED

Test 5: call dequeue() and sample() from an empty randomized queue
  * dequeue()
  * sample()
==> passed

Test 6: create multiple randomized queue objects at the same time
  * n = 10
  * n = 100
==> passed

Test 7: check that iterator() returns correct items after a sequence
        of n enqueue() operations
  * n = 10
  * n = 50
==> passed

Test 8: check that iterator() returns correct items after sequence
        of m enqueue() and dequeue() operations
  * m = 10
  * m = 1000
==> passed

Test 9: create two nested iterators over the same randomized queue
  * n = 10
    - two inner iterators return the same sequence of items
    - they should return the same set of items but in a
      different order

  * n = 50
    - two inner iterators return the same sequence of items
    - they should return the same set of items but in a
      different order

==> FAILED

Test 10: create two parallel iterators over the same randomized queue
  * n = 10
    - two iterators return the same sequence of values
    - they should return the same set of values but in a
      different order

  * n = 50
    - two iterators return the same sequence of values
    - they should return the same set of values but in a
      different order

==> FAILED

Test 11: create two iterators over different randomized queues
==> passed

Test 12: create RandomizedQueue objects of different parameterized types
==> passed

Test 13: check randomness of sample() by enqueueing n items, repeatedly calling
         sample(), and counting the frequency of each item
  * n = 3, trials = 12000

    java.lang.IllegalArgumentException: calls get() with null key

    edu.princeton.cs.algs4.ST.get(ST.java:74)
    TestRandomizedQueue.checkRandomnessOfSample(TestRandomizedQueue.java:508)
    TestRandomizedQueue.test13(TestRandomizedQueue.java:999)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1224)

  * n = 5, trials = 12000

    java.lang.IllegalArgumentException: calls get() with null key

    edu.princeton.cs.algs4.ST.get(ST.java:74)
    TestRandomizedQueue.checkRandomnessOfSample(TestRandomizedQueue.java:508)
    TestRandomizedQueue.test13(TestRandomizedQueue.java:1000)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1224)

  * n = 8, trials = 12000

    java.lang.ArrayIndexOutOfBoundsException: Index 8 out of bounds for length 8

    RandomizedQueue$ListIterator.next(RandomizedQueue.java:115)
    RandomizedQueue.sample(RandomizedQueue.java:92)
    TestRandomizedQueue.checkRandomnessOfSample(TestRandomizedQueue.java:508)
    TestRandomizedQueue.test13(TestRandomizedQueue.java:1001)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1224)

  * n = 10, trials = 12000

    java.lang.IllegalArgumentException: calls get() with null key

    edu.princeton.cs.algs4.ST.get(ST.java:74)
    TestRandomizedQueue.checkRandomnessOfSample(TestRandomizedQueue.java:508)
    TestRandomizedQueue.test13(TestRandomizedQueue.java:1002)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1224)

==> FAILED

Test 14: check randomness of dequeue() by enqueueing n items, dequeueing n items,
         and seeing whether each of the n! permutations is equally likely
  * n = 2, trials = 12000
  * n = 3, trials = 12000
  * n = 4, trials = 12000
  * n = 5, trials = 12000
==> passed

Test 15: check randomness of iterator() by enqueueing n items, iterating over those
         n items, and seeing whether each of the n! permutations is equally likely
  * n = 2, trials = 12000

    java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2

    RandomizedQueue$ListIterator.hasNext(RandomizedQueue.java:106)
    SafeIterable$SafeIterator.hasNext(SafeIterable.java:54)
    TestRandomizedQueue.checkRandomnessOfIterator(TestRandomizedQueue.java:656)
    TestRandomizedQueue.test15(TestRandomizedQueue.java:1023)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1230)

  * n = 3, trials = 12000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
              ABC      6034    2000.0      13326.25
              ACB         0    2000.0          0.00
              BAC      5966    2000.0      13040.83
              BCA         0    2000.0          0.00
              CAB         0    2000.0          0.00
              CBA         0    2000.0          0.00
        -------------------------------------------
                      12000   12000.0      26367.08

    G-statistic = 26367.08 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * n = 4, trials = 12000

    java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length 4

    RandomizedQueue$ListIterator.hasNext(RandomizedQueue.java:106)
    SafeIterable$SafeIterator.hasNext(SafeIterable.java:54)
    TestRandomizedQueue.checkRandomnessOfIterator(TestRandomizedQueue.java:656)
    TestRandomizedQueue.test15(TestRandomizedQueue.java:1025)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1230)

  * n = 5, trials = 12000

==> FAILED

Test 16: call enqueue() with a null argument
==> passed

Test 17: check that remove() and next() throw the specified exceptions in iterator()
    - throws wrong exception when calling next() when iterator is exhausted
    - throws a java.lang.ArrayIndexOutOfBoundsException
    - should throw a java.util.NoSuchElementException

==> FAILED

Test 18: call iterator() when randomized queue is empty
==> passed


Total: 11/18 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference RandomizedQueue and Deque)
********************************************************************************

Testing correctness of Permutation
*-----------------------------------------------------------
Tests 1-5 call the main() function directly, resetting standard input
before each call.

Running 9 total tests.

Test 1a: check formatting for sample inputs from assignment specification
  % java Permutation 3 < distinct.txt
  D I C

  - wrong number of lines of output in student solution
  - lines of output in student   solution = 1
  - lines of output in reference solution = 3

  % java Permutation 3 < distinct.txt
  C H C

  - wrong number of lines of output in student solution
  - lines of output in student   solution = 1
  - lines of output in reference solution = 3

  % java Permutation 8 < duplicates.txt
  BB BB CC BB BB BB CC BB

  - wrong number of lines of output in student solution
  - lines of output in student   solution = 1
  - lines of output in reference solution = 8

==> FAILED

Test 1b: check formatting for other inputs
  % java Permutation 8 < mediumTale.txt
  wisdom times was was it it the wisdom

  - wrong number of lines of output in student solution
  - lines of output in student   solution = 1
  - lines of output in reference solution = 8

  % java Permutation 0 < distinct.txt

==> FAILED

Test 2: check that main() reads all data from standard input
  * filename = distinct.txt, k = 3
  * filename = distinct.txt, k = 3
  * filename = duplicates.txt, k = 8
  * filename = mediumTale.txt, k = 8
==> passed

Test 3a: check that main() prints each item from the sequence at most once
         (for inputs with no duplicate strings)
  * filename = distinct.txt, k = 3
    - number of times student prints string "B"   = 2
    - number of times string "B" appears in input = 1
    - failed on trial 2 of 1000

  * filename = distinct.txt, k = 1
  * filename = distinct.txt, k = 9
    - number of times student prints string "C"   = 2
    - number of times string "C" appears in input = 1
    - failed on trial 1 of 1000

  * filename = permutation6.txt, k = 6
    - number of times student prints string "A"   = 2
    - number of times string "A" appears in input = 1
    - failed on trial 1 of 1000

  * filename = permutation10.txt, k = 10
    - number of times student prints string "A"   = 3
    - number of times string "A" appears in input = 1
    - failed on trial 1 of 1000

==> FAILED

Test 3b: check that main() prints each item from the sequence at most once
         (for inputs with duplicate strings)
  * filename = duplicates.txt, k = 8
    - number of times student prints string "AA"   = 2
    - number of times string "AA" appears in input = 1
    - failed on trial 3 of 1000

  * filename = duplicates.txt, k = 3
    - number of times student prints string "CC"   = 3
    - number of times string "CC" appears in input = 2
    - failed on trial 59 of 1000

  * filename = permutation8.txt, k = 6
    - number of times student prints string "C"   = 5
    - number of times string "C" appears in input = 4
    - failed on trial 1 of 1000

  * filename = permutation8.txt, k = 2
    - number of times student prints string "A"   = 2
    - number of times string "A" appears in input = 1
    - failed on trial 37 of 1000

  * filename = tinyTale.txt, k = 10
    - number of times student prints string "times"   = 3
    - number of times string "times" appears in input = 2
    - failed on trial 1 of 1000

==> FAILED

Test 3c: check that main() prints each item from the sequence at most once
         (for inputs with newlines)
  * filename = mediumTale.txt, k = 10
    - number of times student prints string "wisdom"   = 2
    - number of times string "wisdom" appears in input = 1
    - failed on trial 2 of 1000

  * filename = mediumTale.txt, k = 20
    - number of times student prints string "foolishness"   = 3
    - number of times string "foolishness" appears in input = 1
    - failed on trial 1 of 1000

  * filename = tale.txt, k = 10
  * filename = tale.txt, k = 50
==> FAILED

Test 4: check main() when k = 0
  * filename = distinct.txt, k = 0
  * filename = distinct.txt, k = 0
==> passed

Test 5a: check that permutations are uniformly random
         (for inputs with no duplicate strings)
  * filename = permutation4.txt, k = 1
  * filename = permutation4.txt, k = 2
    - student prints an invalid permutation:
      C C
    - failed on trial 2 of 1000

  * filename = permutation4.txt, k = 3
    - student prints an invalid permutation:
      C C C
    - failed on trial 1 of 1000

  * filename = permutation4.txt, k = 4
    - student prints an invalid permutation:
      A A A B
    - failed on trial 1 of 1000

  * filename = permutation6.txt, k = 2
    - student prints an invalid permutation:
      A A
    - failed on trial 1 of 1000

==> FAILED

Test 5b: check that permutations are uniformly random
         (for inputs with duplicate strings)
  * filename = permutation5.txt, k = 1
  * filename = permutation5.txt, k = 2

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
              A A       341     300.0         87.36
              A B       245     300.0        -99.24
              B A       253     300.0        -86.22
              B B       161     100.0        153.35
        -------------------------------------------
                       1000    1000.0         55.26

    G-statistic = 55.26 (p-value = 0.000000, reject if p-value <= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * filename = permutation5.txt, k = 3
    - student prints an invalid permutation:
      B B B
    - failed on trial 6 of 1000

  * filename = duplicates.txt, k = 3
    - student prints an invalid permutation:
      AA CC AA
    - failed on trial 9 of 1000

  * filename = permutation8.txt, k = 2
    - student prints an invalid permutation:
      A A
    - failed on trial 48 of 1000

==> FAILED

Total: 2/9 tests passed!


================================================================
********************************************************************************
*  TIMING (substituting reference RandomizedQueue and Deque)
********************************************************************************

Timing Permutation
*-----------------------------------------------------------
Running 23 total tests.

Test 1: count calls to methods in StdIn
  * java Permutation 5 < distinct.txt
  * java Permutation 10 < permutation10.txt
  * java Permutation 1 < mediumTale.txt
  * java Permutation 20 < tale.txt
  * java Permutation 100 < tale.txt
  * java Permutation 16412 < tale.txt
==> passed

Test 2: count calls to methods in Deque and RandomizedQueue
  * java Permutation 5 < distinct.txt
  * java Permutation 10 < permutation10.txt
  * java Permutation 1 < mediumTale.txt
  * java Permutation 20 < tale.txt
  * java Permutation 100 < tale.txt
  * java Permutation 16412 < tale.txt
==> passed

Test 3: count calls to methods in StdRandom
  * java Permutation 5 < distinct.txt
  * java Permutation 10 < permutation10.txt
  * java Permutation 1 < mediumTale.txt
  * java Permutation 20 < tale.txt
  * java Permutation 100 < tale.txt
  * java Permutation 16412 < tale.txt
==> passed

Test 4: Time main() with k = 5, for inputs containing n random strings

                    n  seconds
------------------------------
=> passed        1000     0.00
=> passed        2000     0.00
=> passed        4000     0.00
=> passed        8000     0.00
=> passed       16000     0.01
=> passed       32000     0.02
=> passed       64000     0.08
=> passed      128000     0.04
=> passed      256000     0.08
=> passed      512000     0.16
==> 10/10 tests passed


Test 5: Time main() with k = 1000, for inputs containing n random strings

                    n  seconds
------------------------------
=> passed        1000     0.00
=> passed        2000     0.00
=> passed        4000     0.00
=> passed        8000     0.00
=> passed       16000     0.01
=> passed       32000     0.01
=> passed       64000     0.02
=> passed      128000     0.04
=> passed      256000     0.08
=> passed      512000     0.30
==> 10/10 tests passed


Total: 23/23 tests passed!


================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Permutation
*-----------------------------------------------------------
Running 2 total tests.

Test 1: check that only one Deque or RandomizedQueue object is created
  * filename = distinct.txt, n = 9, k = 1
  * filename = distinct.txt, n = 9, k = 2
  * filename = distinct.txt, n = 9, k = 4
  * filename = tinyTale.txt, n = 12, k = 10
  * filename = tale.txt, n = 138653, k = 50
==> passed

Test 2: check that the maximum size of any Deque or RandomizedQueue object
        created is between k and n
  * filename = distinct.txt, n = 9, k = 1
  * filename = distinct.txt, n = 9, k = 2
  * filename = distinct.txt, n = 9, k = 4
  * filename = tinyTale.txt, n = 12, k = 10
  * filename = tale.txt, n = 138653, k = 5
  * filename = tale.txt, n = 138653, k = 50
  * filename = tale.txt, n = 138653, k = 500
  * filename = tale.txt, n = 138653, k = 5000
  * filename = tale.txt, n = 138653, k = 50000
==> passed

Test 3 (bonus): check that maximum size of any or Deque or RandomizedQueue object
                created is equal to k
  * filename = tale.txt, n = 138653, k = 5
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 50
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 500
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 5000
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 50000
    - max size of RandomizedQueue object = 138653

==> FAILED

Total: 2/2 tests passed!


================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Deque
*-----------------------------------------------------------
For tests 1-4, the maximum amount of memory allowed for a Deque
containing n items is 48n + 192.

Running 48 total tests.

Test 1a-1i: total memory usage after inserting n items,
            where n is a power of 2

                 n        bytes
----------------------------------------------------------
=> passed       32         1640
=> passed       64         3176
=> passed      128         6248
=> passed      256        12392
=> passed      512        24680
=> passed     1024        49256
=> passed     2048        98408
=> passed     4096       196712
=> passed     8192       393320
==> 9/9 tests passed

Memory: 48.00 n + 104.00   (R^2 = 1.000)


Test 2a-2i: Total memory usage after inserting n items,
            when n is one more than a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       33         1688
=> passed       65         3224
=> passed      129         6296
=> passed      257        12440
=> passed      513        24728
=> passed     1025        49304
=> passed     2049        98456
=> passed     4097       196760
=> passed     8193       393368
==> 9/9 tests passed

Memory: 48.00 n + 104.00   (R^2 = 1.000)


Test 3a-3i: Total memory usage after inserting 2n-1 items, and then
            deleting n-1 items, when n is one more than a power of 2.

                 n        bytes
----------------------------------------------------------
=> FAILED       33         3224   (1.8x)
=> FAILED       65         6296   (1.9x)
=> FAILED      129        12440   (1.9x)
=> FAILED      257        24728   (2.0x)
=> FAILED      513        49304   (2.0x)
=> FAILED     1025        98456   (2.0x)
=> FAILED     2049       196760   (2.0x)
=> FAILED     4097       393368   (2.0x)
=> FAILED     8193       786584   (2.0x)
==> 0/9 tests passed

Memory: 96.00 n + 56.00   (R^2 = 1.000)


Test 4a-4e: Total memory usage after inserting n items,
            and then deleting all but one item
            (should not grow with n or be too large of a constant).

                 n        bytes
----------------------------------------------------------
=> FAILED       32         1640   (6.8x)
=> FAILED       64         3176  (13.2x)
=> FAILED      128         6248  (26.0x)
=> FAILED      256        12392  (51.6x)
=> FAILED      512        24680 (102.8x)
=> FAILED     1024        49256 (205.2x)
=> FAILED     2048        98408 (410.0x)
=> FAILED     4096       196712 (819.6x)
=> FAILED     8192       393320 (2e+03x)
==> 0/9 tests passed

Memory: 48.00 n + 104.00   (R^2 = 1.000)


Test 5a-5e: Total memory usage of iterator after inserting n items
            (should not grow with n or be too large of a constant).

                 n        bytes
----------------------------------------------------------
=> passed       32           32
=> passed       64           32
=> passed      128           32
=> passed      256           32
=> passed      512           32
=> passed     1024           32
=> passed     2048           32
=> passed     4096           32
=> passed     8192           32
==> 9/9 tests passed

Memory: 32.00   (R^2 = 1.000)


Test 6a: Insert n strings; delete them one at a time, checking for
         loitering after each deletion. The probabilities of addFirst()
         and addLast() are (p1, p2), respectively. The probabilities of
         removeFirst() and removeLast() are (q1, q2), respectively.
  * 100 random insertions (1.0, 0.0) and 100 random deletions (1.0, 0.0)
    - loitering observed during 100 of 100 deletions
    - maximum number of loitered objects at one time = 100

  * 100 random insertions (1.0, 0.0) and 100 random deletions (0.0, 1.0)
    - loitering observed during 100 of 100 deletions
    - maximum number of loitered objects at one time = 1

  * 100 random insertions (0.0, 1.0) and 100 random deletions (1.0, 0.0)
    - loitering observed during 100 of 100 deletions
    - maximum number of loitered objects at one time = 100

  * 100 random insertions (0.0, 1.0) and 100 random deletions (0.0, 1.0)
    - loitering observed during 100 of 100 deletions
    - maximum number of loitered objects at one time = 1

  * 100 random insertions (0.5, 0.5) and 100 random deletions (0.5, 0.5)
    - loitering observed during 100 of 100 deletions
    - maximum number of loitered objects at one time = 55

==> FAILED

Test 6b: Perform random operations, checking for loitering after
         each operation. The probabilities of addFirst(), addLast(),
         removeFirst(), and removeLast() are (p1, p2, p3, p4),
         respectively.
  * 100 random operations (0.8, 0.0, 0.2, 0.0)
    - loitering detected after operation 4 of 100
    - sequence of operations was:
         deque.addFirst("RAHBIPKOLB")
         deque.addFirst("THAOVLYQET")
         deque.addFirst("ZJCIKYCHIS")
         deque.removeFirst()     ==> ZJCIKYCHIS
    - loitered object(s):
      ZJCIKYCHIS

  * 100 random operations (0.8, 0.0, 0.0, 0.2)
    - loitering detected after operation 4 of 100
    - sequence of operations was:
         deque.addFirst("NWFPSWNZHD")
         deque.addFirst("SDEEPMLBSU")
         deque.addFirst("LNWTVQPLRF")
         deque.removeLast()      ==> NWFPSWNZHD
    - loitered object(s):
      NWFPSWNZHD

  * 100 random operations (0.0, 0.8, 0.2, 0.0)
    - loitering detected after operation 8 of 100
    - sequence of operations was:
         deque.addLast("AANAADPWBR")
         deque.addLast("OOSMLOSNNT")
         deque.addLast("SNHVOJGRLC")
         deque.addLast("RLQCYMBWFB")
         deque.addLast("URQWHNEDQA")
         deque.addLast("EUPOXRYXBV")
         deque.addLast("DJLBGZSDPG")
         deque.removeFirst()     ==> AANAADPWBR
    - loitered object(s):
      AANAADPWBR

  * 100 random operations (0.0, 0.8, 0.0, 0.2)
    - loitering detected after operation 10 of 100
    - sequence of operations was:
         deque.addLast("MOKBIBOEUK")
         deque.addLast("AMDWOZANLK")
         deque.addLast("CEFKXQOIZY")
         deque.addLast("XTBVGGYOQN")
         deque.addLast("TRSAUNKQZR")
         deque.addLast("NFDTOEIBSV")
         deque.addLast("MFLLHLLZNW")
         deque.addLast("DKQBIKBVKQ")
         deque.addLast("IUZSGHKQZT")
         deque.removeLast()      ==> IUZSGHKQZT
    - loitered object(s):
      IUZSGHKQZT

  * 100 random operations (0.4, 0.4, 0.1, 0.1)
    - loitering detected after operation 3 of 100
    - sequence of operations was:
         deque.addFirst("VHABLSUNVT")
         deque.addFirst("XYHGCFPWXT")
         deque.removeFirst()     ==> XYHGCFPWXT
    - loitered object(s):
      XYHGCFPWXT

  * 100 random operations (0.2, 0.2, 0.3, 0.3)
    - loitering detected after operation 2 of 100
    - sequence of operations was:
         deque.addLast("TPHAZOXMPQ")
         deque.removeLast()      ==> TPHAZOXMPQ
    - loitered object(s):
      TPHAZOXMPQ

==> FAILED

Test 7: worst-case constant memory allocated or de-allocated
        per deque operation?
  * 128 random operations
  * 256 random operations
  * 512 random operations
==> passed


Min observed memory for Deque: 48.00 n + 104.00   (R^2 = 1.000)
Max observed memory for Deque: 96.00 n + 56.00   (R^2 = 1.000)

Total: 28/48 tests passed!


================================================================



Analyzing memory of RandomizedQueue
*-----------------------------------------------------------
For tests 1-5, the maximum amount of memory allowed for
a RandomizedQueue containing n items is 48n + 192.

Test 1a-1i: Total memory usage after inserting n items
            when n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       32          352
=> passed       64          608
=> passed      128         1120
=> passed      256         2144
=> passed      512         4192
=> passed     1024         8288
=> passed     2048        16480
=> passed     4096        32864
=> passed     8192        65632
==> 9/9 tests passed

Memory: 8.00 n + 96.00   (R^2 = 1.000)


Test 2a-2i: Total memory usage after inserting n items,
            when n is one more than a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       33          608
=> passed       65         1120
=> passed      129         2144
=> passed      257         4192
=> passed      513         8288
=> passed     1025        16480
=> passed     2049        32864
=> passed     4097        65632
=> passed     8193       131168
==> 9/9 tests passed

Memory: 16.00 n + 80.00   (R^2 = 1.000)


Test 3a-3i: Total memory usage after inserting 2n-1 items, and then
            deleting n-1 items, when n is one more than a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       33         1120
=> passed       65         2144
=> passed      129         4192
=> passed      257         8288
=> passed      513        16480
=> passed     1025        32864
=> passed     2049        65632
=> passed     4097       131168
=> passed     8193       262240
==> 9/9 tests passed

Memory: 32.00 n + 64.00   (R^2 = 1.000)


Test 4a-4i: Total memory usage after inserting n items, deleting n items,
            then inserting n times, when n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       32          352
=> passed       64          608
=> passed      128         1120
=> passed      256         2144
=> passed      512         4192
=> passed     1024         8288
=> passed     2048        16480
=> passed     4096        32864
=> passed     8192        65632
==> 9/9 tests passed

Memory: 8.00 n + 96.00   (R^2 = 1.000)


Test 5a-5i: Total memory usage after inserting n items,
            and then deleting all but one item.

                 n        bytes
----------------------------------------------------------
=> FAILED       32          352   (1.5x)
=> FAILED       64          608   (2.5x)
=> FAILED      128         1120   (4.7x)
=> FAILED      256         2144   (8.9x)
=> FAILED      512         4192  (17.5x)
=> FAILED     1024         8288  (34.5x)
=> FAILED     2048        16480  (68.7x)
=> FAILED     4096        32864 (136.9x)
=> FAILED     8192        65632 (273.5x)
==> 0/9 tests passed

Memory: 8.00 n + 96.00   (R^2 = 1.000)


Test 6a-6d: Total memory usage of iterator after inserting n items.

                 n        bytes
----------------------------------------------------------
=> passed       32           32
=> passed       64           32
=> passed      128           32
=> passed      256           32
=> passed      512           32
=> passed     1024           32
=> passed     2048           32
=> passed     4096           32
=> passed     8192           32
==> 9/9 tests passed

Memory: 32.00   (R^2 = 1.000)


Test 7a: Insert 100 strings; delete them one at a time, checking
         for loitering after each deletion.
==> passed

Test 7b: Perform random operations, checking for loitering after
         each operation. The probabilities of enqueue(), dequeue(),
         and sample() are (p1, p2, p3), respectively.
  * 200 random operations (0.8, 0.2, 0.0)
  * 200 random operations (0.2, 0.8, 0.0)
  * 200 random operations (0.6, 0.2, 0.2)
  * 200 random operations (0.2, 0.4, 0.4)

    java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2

    RandomizedQueue$ListIterator.next(RandomizedQueue.java:115)
    RandomizedQueue.sample(RandomizedQueue.java:92)
    MemoryOfRandomizedQueue.loiter(MemoryOfRandomizedQueue.java:410)
    MemoryOfRandomizedQueue.test7b(MemoryOfRandomizedQueue.java:533)
    MemoryOfRandomizedQueue.main(MemoryOfRandomizedQueue.java:741)

    - sequence of operations was:
         rq.enqueue("EFLTXWYCJA")
         rq.dequeue()     ==> "EFLTXWYCJA"
         rq.enqueue("GPBNHHTADL")
         rq.sample()      ==> "GPBNHHTADL"
         rq.dequeue()     ==> "GPBNHHTADL"
         rq.enqueue("KLWWDDXEBX")
         rq.enqueue("YHRAKKYYJZ")
         rq.sample()      ==> "YHRAKKYYJZ"
         rq.sample()

==> FAILED

Test 8: Insert T items into queue; then iterate over queue and check
        that worst-case constant memory is allocated or deallocated
        per iterator operation.
  * T = 64
  * T = 128
  * T = 256
==> passed

Test 9: Total memory usage after inserting n items, seeking to identify
        values of n where memory usage is minimized as a function of n.

                 n        bytes
----------------------------------------------------------
=> passed        8          160
=> passed       16          224
=> passed       32          352
=> passed       64          608
=> passed      128         1120
=> passed      256         2144
=> passed      512         4192
=> passed     1024         8288
=> passed     2048        16480
==> 9/9 tests passed

Memory: 8.00 n + 96.00   (R^2 = 1.000)


Test 10: Total memory usage after inserting 4096 items, then successively
         deleting items, seeking values of n where memory usage is maximized
         as a function of n

                 n        bytes
----------------------------------------------------------
=> passed     3200        65632
=> passed     1600        65632
=> FAILED      800        65632   (1.7x)
=> FAILED      400        65632   (3.4x)
=> FAILED      200        65632   (6.7x)
=> FAILED      100        65632  (13.1x)
=> FAILED       50        65632  (25.3x)
==> 2/7 tests passed

Memory: 65632.00   (R^2 = 1.000)


Min observed memory for RandomizedQueue: 65632.00   (R^2 = 1.000)
Max observed memory for RandomizedQueue: 32.00 n + 64.00   (R^2 = 1.000)

Running 73 total tests.

Total: 58/73 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing Deque
*-----------------------------------------------------------
Running 103 total tests.

Test 1a-1k: make n calls to addFirst() followed by n calls to removeFirst()
                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.00
=> passed      128000     0.00
=> passed      256000     0.00
=> passed      512000     0.01
=> passed     1024000     0.03
==> 11/11 tests passed


Test 2a-2k: make n calls to addLast() followed by n calls to removeLast()
                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.00
=> passed      128000     0.00
=> passed      256000     0.01
=> passed      512000     0.01
=> passed     1024000     0.02
==> 11/11 tests passed


Test 3a-3k: make n calls to addFirst() followed by n calls to removeLast()
                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.00
=> passed      128000     0.00
=> passed      256000     0.00
=> passed      512000     0.01
=> passed     1024000     0.02
==> 11/11 tests passed


Test 4a-4k: make n calls to addLast() followed by n calls to removeFirst()
                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.00
=> passed      128000     0.00
=> passed      256000     0.00
=> passed      512000     0.01
=> passed     1024000     0.01
==> 11/11 tests passed


Test 5a-5g: make n random calls to addFirst(), removeFirst(), isEmpty(), and size()
            with probabilities (0.7, 0.1, 0.1, 0.1)

                    n  seconds
------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.00
=> passed      128000     0.01
=> passed      256000     0.01
=> passed      512000     0.02
=> passed     1024000     0.03
=> passed     2048000     0.07
==> 12/12 tests passed


Test 6a-6g: make n random calls to addLast(), removeLast(), isEmpty(), and size(),
            with probabilities (0.7, 0.1, 0.1, 0.1)

                    n  seconds
------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.00
=> passed      128000     0.01
=> passed      256000     0.01
=> passed      512000     0.02
=> passed     1024000     0.04
=> passed     2048000     0.07
==> 12/12 tests passed


Test 7a-7g: make n random calls to addFirst(), addLast(), removeFirst(), removeLast(),
            isEmpty(), and size() with probabilities (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)

                    n  seconds
------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00

    java.lang.NullPointerException

    Deque$MyStack.pop(Deque.java:135)
    Deque.removeLast(Deque.java:74)
    TimeDeque.timeRandomOperations(TimeDeque.java:107)
    TimeDeque.timeRandomOperations(TimeDeque.java:192)
    TimeDeque.test7(TimeDeque.java:277)
    TimeDeque.main(TimeDeque.java:384)

=> FAILED       65536   Test did not complete due to an exception.

==> 6/12 tests passed


Test 8a-8g: make n calls to addFirst(); iterate over the n items by calling
            next() and hasNext()

                    n  seconds
------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.00
=> passed      128000     0.00
=> passed      256000     0.01
=> passed      512000     0.02
=> passed     1024000     0.02
=> passed     2048000     0.06
==> 12/12 tests passed


Test 9a-9k: make n calls to addFirst()/addLast(); interleave n calls each to
            removeFirst(), removeLast(), addFirst(), and addLast()

                    n  seconds
----------------------------------
=> passed        1025     0.00
=> passed        2049     0.00
=> passed        4097     0.00
=> passed        8193     0.00
=> passed       16385     0.00
=> passed       32769     0.00
=> passed       65537     0.00
=> passed      128001     0.01
=> passed      256001     0.02
=> passed      512001     0.15
=> passed     1024001     0.09
==> 11/11 tests passed

Total: 97/103 tests passed!


================================================================



Timing RandomizedQueue
*-----------------------------------------------------------
Running 67 total tests.

Test 1: make n calls to enqueue() followed by n calls to dequeue();
        count calls to StdRandom
  * n = 10
    - enqueue() and dequeue() should call StdRandom() at most once per item
    - number of items                             = 10
    - number of elementary StdRandom() operations = 100

  * n = 100
    - enqueue() and dequeue() should call StdRandom() at most once per item
    - number of items                             = 100
    - number of elementary StdRandom() operations = 10000

  * n = 1000
    - enqueue() and dequeue() should call StdRandom() at most once per item
    - number of items                             = 1000
    - number of elementary StdRandom() operations = 1000000

==> FAILED

Test 2: make n calls to enqueue() follwed by n calls to sample();
        count calls to StdRandom
  * n = 10
  * n = 100
  * n = 1000
==> passed

Test 3: make n calls to enqueue() and iterate over the n items;
        count calls to StdRandom
  * n = 10
  * n = 100
  * n = 1000
==> passed

Test 4a-k: make n calls to enqueue() followed by n calls to dequeue()

                    n  seconds
----------------------------------
=> passed        1024     0.03
=> passed        2048     0.10
=> passed        4096     0.38


        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in StdRandom exceeds limit: 100000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

=> FAILED        8192   [ Test did not complete due to an exception. ]

==> 3/11 tests passed


Test 5a-k: make n calls to enqueue() followed by n random calls to
           enqueue(), sample(), dequeue(), isEmpty(), and size()
           with probabilities (0.2, 0.2, 0.2, 0.2, 0.2)

                    n  seconds
----------------------------------
=> passed        1024     0.03
=> passed        2048     0.10
=> passed        4096     0

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.
